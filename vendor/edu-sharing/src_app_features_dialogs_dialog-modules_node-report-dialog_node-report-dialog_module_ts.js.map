{"version":3,"file":"src_app_features_dialogs_dialog-modules_node-report-dialog_node-report-dialog_module_ts.js","mappings":"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","sources":["./src/app/features/dialogs/dialog-modules/node-report-dialog/node-report-dialog.component.ts","./src/app/features/dialogs/dialog-modules/node-report-dialog/node-report-dialog.component.html","./src/app/features/dialogs/dialog-modules/node-report-dialog/node-report-dialog.module.ts"],"sourcesContent":["import { trigger } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Inject,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { filter, first, take } from 'rxjs/operators';\nimport {\n    DialogButton,\n    LoginResult,\n    Node,\n    RestConnectorService,\n    RestIamService,\n    RestNodeService,\n} from '../../../../core-module/core.module';\nimport { Toast } from '../../../../services/toast';\nimport { CARD_DIALOG_DATA, Closable } from '../../card-dialog/card-dialog-config';\nimport { CardDialogRef } from '../../card-dialog/card-dialog-ref';\nimport { UIAnimation } from 'ngx-edu-sharing-ui';\nimport { AuthenticationService, UserService } from 'ngx-edu-sharing-api';\nimport { forkJoin } from 'rxjs';\n\nexport interface NodeReportDialogData {\n    node: Node;\n}\n\n@Component({\n    selector: 'es-node-report-dialog',\n    templateUrl: 'node-report-dialog.component.html',\n    styleUrls: ['node-report-dialog.component.scss'],\n    animations: [\n        trigger('fade', UIAnimation.fade()),\n        trigger('cardAnimation', UIAnimation.cardAnimation()),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NodeReportDialogComponent implements OnInit {\n    readonly reasons = ['UNAVAILABLE', 'INAPPROPRIATE_CONTENT', 'INVALID_METADATA', 'OTHER'];\n\n    @ViewChild('formElement') formRef: ElementRef<HTMLFormElement>;\n\n    readonly form = new UntypedFormGroup({\n        reason: new UntypedFormControl('', Validators.required),\n        comment: new UntypedFormControl(''),\n        email: new UntypedFormControl('', [Validators.email, Validators.required]),\n    });\n\n    constructor(\n        @Inject(CARD_DIALOG_DATA) public data: NodeReportDialogData,\n        private dialogRef: CardDialogRef,\n        private authenticationService: AuthenticationService,\n        private userService: UserService,\n        private translate: TranslateService,\n        private toast: Toast,\n        private nodeApi: RestNodeService,\n        private cdr: ChangeDetectorRef,\n    ) {}\n\n    ngOnInit(): void {\n        this.dialogRef.patchConfig({\n            buttons: [\n                new DialogButton('CANCEL', { color: 'standard' }, () => this.cancel()),\n                new DialogButton('NODE_REPORT.REPORT', { color: 'primary' }, () => this.report()),\n            ],\n        });\n        // Pre-fill the email field for logged-in users.\n        forkJoin(\n            this.authenticationService.observeLoginInfo().pipe(first()),\n            this.userService.observeCurrentUser().pipe(first()),\n        ).subscribe(([login, user]) => {\n            if (!login.isGuest && !!user?.person?.profile?.email) {\n                this.form.get('email').disable();\n                this.form.patchValue({ email: user.person.profile.email });\n            }\n        });\n        // Disable close by backdrop click as soon as the user enters any value .\n        this.form.valueChanges\n            .pipe(\n                filter((values) => Object.values(values).some((value) => !!value)),\n                take(1),\n            )\n            .subscribe(() => this.dialogRef.patchConfig({ closable: Closable.Standard }));\n    }\n\n    cancel() {\n        this.dialogRef.close();\n    }\n\n    shouldShowError(field: string) {\n        const fieldControl = this.form.get(field);\n        return !fieldControl.disabled && fieldControl.touched && !fieldControl.valid;\n    }\n\n    report() {\n        if (this.form.valid) {\n            // Include value for possibly disabled email field.\n            const value = this.form.getRawValue();\n            this.setLoading(true);\n            this.nodeApi\n                .reportNode(\n                    this.data.node.ref.id,\n                    this.getReasonAsString(value.reason),\n                    value.email,\n                    value.comment,\n                    this.data.node.ref.repo,\n                )\n                .subscribe(\n                    () => {\n                        this.toast.toast('NODE_REPORT.DONE');\n                        this.dialogRef.close();\n                    },\n                    (error: any) => {\n                        this.setLoading(false);\n                        this.toast.error(error);\n                    },\n                );\n        } else {\n            for (const field of ['reason', 'email']) {\n                const control = this.form.get(field);\n                if (!control.valid) {\n                    control.markAsTouched();\n                    this.focusField(field);\n                    this.cdr.detectChanges();\n                    break;\n                }\n            }\n        }\n    }\n\n    setLoading(isLoading: boolean): void {\n        this.dialogRef.patchState({ isLoading });\n        if (isLoading) {\n            this.form.disable();\n        } else {\n            this.form.enable();\n        }\n    }\n\n    private getReasonAsString(reason: string) {\n        return `${this.translate.instant('NODE_REPORT.REASONS.' + reason)} (${reason})`;\n    }\n\n    private focusField(field: string) {\n        const form = this.formRef.nativeElement;\n        const element = form.elements.namedItem(field);\n        if (element instanceof HTMLElement) {\n            element.focus();\n        } else if (element instanceof RadioNodeList) {\n            (element[0] as HTMLElement).focus();\n        }\n    }\n}\n","<form #formElement (ngSubmit)=\"report()\" [formGroup]=\"form\">\n  <h2>{{ 'NODE_REPORT.REPORT_INFO' | translate : { name: (data.node | nodeTitle) } }}</h2>\n  <div class=\"report\">\n    <mat-radio-group\n      formControlName=\"reason\"\n      name=\"reason\"\n      [attr.aria-label]=\"'NODE_REPORT.REASON' | translate\"\n    >\n      <mat-radio-button\n        *ngFor=\"let reason of reasons\"\n        [value]=\"reason\"\n        [aria-describedby]=\"shouldShowError('reason') ? 'node-report-reason-error' : null\"\n        >{{ 'NODE_REPORT.REASONS.' + reason | translate }}</mat-radio-button\n      >\n    </mat-radio-group>\n    <mat-error *ngIf=\"shouldShowError('reason')\" id=\"node-report-reason-error\">\n      {{ 'NODE_REPORT.REASON_REQUIRED' | translate }}\n    </mat-error>\n  </div>\n  <mat-form-field floatLabel=\"always\">\n    <mat-label>{{ 'NODE_REPORT.COMMENT' | translate }}</mat-label>\n    <textarea\n      matInput\n      cdkTextareaAutosize\n      cdkAutosizeMinRows=\"3\"\n      cdkAutosizeMaxRows=\"5\"\n      name=\"comment\"\n      formControlName=\"comment\"\n      placeholder=\"{{ 'NODE_REPORT.COMMENT_PLACEHOLDER' | translate }}\"\n      autofocus\n    ></textarea>\n  </mat-form-field>\n  <mat-form-field floatLabel=\"always\">\n    <mat-label>{{ 'NODE_REPORT.EMAIL' | translate }}</mat-label>\n    <input\n      matInput\n      type=\"email\"\n      name=\"reportMail\"\n      name=\"email\"\n      formControlName=\"email\"\n      placeholder=\"{{ 'NODE_REPORT.EMAIL_PLACEHOLDER' | translate }}\"\n    />\n    <mat-error>\n      {{ 'NODE_REPORT.EMAIL_REQUIRED' | translate }}\n    </mat-error>\n  </mat-form-field>\n</form>\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../../../shared/shared.module';\nimport { NodeReportDialogComponent } from './node-report-dialog.component';\n\nexport { NodeReportDialogComponent };\n\n@NgModule({\n    declarations: [NodeReportDialogComponent],\n    imports: [SharedModule],\n})\nexport class NodeReportDialogModule {}\n"],"names":["trigger","UntypedFormControl","UntypedFormGroup","Validators","filter","first","take","DialogButton","CARD_DIALOG_DATA","Closable","UIAnimation","forkJoin","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","reason_r3","ctx_r1","shouldShowError","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","ɵɵtextInterpolate1","NodeReportDialogComponent","constructor","data","dialogRef","authenticationService","userService","translate","toast","nodeApi","cdr","reasons","form","reason","required","comment","email","ngOnInit","patchConfig","buttons","color","cancel","report","observeLoginInfo","pipe","observeCurrentUser","subscribe","login","user","isGuest","person","profile","get","disable","patchValue","valueChanges","values","Object","some","value","closable","Standard","close","field","fieldControl","disabled","touched","valid","getRawValue","setLoading","reportNode","node","ref","id","getReasonAsString","repo","error","control","markAsTouched","focusField","detectChanges","isLoading","patchState","enable","instant","formRef","nativeElement","element","elements","namedItem","HTMLElement","focus","RadioNodeList","_","ɵɵdirectiveInject","i1","CardDialogRef","i2","AuthenticationService","UserService","i3","TranslateService","i4","Toast","i5","RestNodeService","ChangeDetectorRef","_2","selectors","viewQuery","NodeReportDialogComponent_Query","rf","ctx","ɵɵlistener","NodeReportDialogComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","NodeReportDialogComponent_mat_radio_button_9_Template","NodeReportDialogComponent_mat_error_10_Template","ɵɵelement","ɵɵpipeBind2","ɵɵpureFunction1","_c1","ɵɵattribute","ɵɵpropertyInterpolate","fade","cardAnimation","changeDetection","SharedModule","NodeReportDialogModule","_3","declarations","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}