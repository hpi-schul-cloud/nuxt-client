{"version":3,"file":"src_app_features_dialogs_dialog-modules_mds-editor-dialog_mds-editor-dialog_module_ts.js","mappings":"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","sources":["./src/app/features/dialogs/dialog-modules/mds-editor-dialog/input-fill-progress/input-fill-progress.component.ts","./src/app/features/dialogs/dialog-modules/mds-editor-dialog/input-fill-progress/input-fill-progress.component.html","./src/app/features/dialogs/dialog-modules/mds-editor-dialog/mds-editor-dialog.component.ts","./src/app/features/dialogs/dialog-modules/mds-editor-dialog/mds-editor-dialog.component.html","./src/app/features/dialogs/dialog-modules/mds-editor-dialog/mds-editor-dialog.module.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { RequiredMode } from '../../../../mds/types/types';\n\n@Component({\n    selector: 'es-input-fill-progress',\n    templateUrl: 'input-fill-progress.component.html',\n    styleUrls: ['input-fill-progress.component.scss'],\n})\nexport class InputFillProgressComponent {\n    readonly RequiredMode = RequiredMode;\n\n    @Input() current: FillTypeStatus;\n    @Input() maximum: FillTypeStatus;\n    @Output() showMissing = new EventEmitter();\n\n    getStatus() {\n        for (const type of Object.values(RequiredMode)) {\n            if ((this.current as any)[type] !== (this.maximum as any)[type]) {\n                return type;\n            }\n        }\n        return 'finished';\n    }\n\n    getFullProgress() {\n        let sum = this.current[RequiredMode.Mandatory];\n        if (this.current[RequiredMode.Mandatory] === this.maximum[RequiredMode.Mandatory]) {\n            sum += this.current[RequiredMode.MandatoryForPublish] || 0;\n            if (\n                this.current[RequiredMode.MandatoryForPublish] ===\n                this.maximum[RequiredMode.MandatoryForPublish]\n            ) {\n                sum += this.current.optional || 0;\n            }\n        }\n        return sum;\n    }\n    getPrimaryProgress() {\n        return (this.current as any)[this.getStatus()] / (this.maximum as any)[this.getStatus()];\n    }\n\n    getCurrentMaximum() {\n        if (this.getStatus() === RequiredMode.Mandatory) {\n            return this.current[RequiredMode.Mandatory];\n        }\n        return (\n            this.maximum[RequiredMode.Mandatory] +\n            (this.maximum[RequiredMode.MandatoryForPublish] || 0)\n        );\n    }\n    getSum(what: 'current' | 'maximum') {\n        let sum = 0;\n        for (const type of Object.values(RequiredMode)) {\n            sum += (this as any)[what][type] || 0;\n        }\n        return sum;\n    }\n}\nexport type FillTypeStatus = {\n    [key in RequiredMode]: number;\n};\n","<div class=\"wrapper\" *ngIf=\"current && maximum\">\n  <div class=\"status status-{{ getStatus() }}\">\n    <div\n      class=\"publish-bar\"\n      [style.width]=\"\n        ((maximum.mandatory + (maximum.mandatoryForPublish || 0)) / getSum('maximum')) * 100 + '%'\n      \"\n    ></div>\n    <div\n      class=\"minimum-bar\"\n      [style.width]=\"(maximum.mandatory / getSum('maximum')) * 100 + '%'\"\n    ></div>\n    <div\n      class=\"current-bar\"\n      [style.width]=\"(getFullProgress() / getSum('maximum')) * 100 + '%'\"\n    ></div>\n  </div>\n  <label class=\"status-{{ getStatus() }}\">\n    <ng-container>{{ getSum('current') }} / {{ getSum('maximum') }}</ng-container>\n    {{ 'FILL_STATUS.MESSAGE' | translate }}\n    <ng-container\n      *ngIf=\"\n        getStatus() === RequiredMode.Mandatory || getStatus() === RequiredMode.MandatoryForPublish\n      \"\n    >\n      -\n      <span class=\"clickable show-missing-button\" tabindex=\"0\" (click)=\"showMissing.emit()\">\n        {{ 'FILL_STATUS.SHOW' | translate }}\n      </span>\n    </ng-container>\n  </label>\n</div>\n","import { AfterViewInit, Component, Inject, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport * as rxjs from 'rxjs';\nimport { delay, filter, first, map } from 'rxjs/operators';\nimport { DialogButton, Node } from '../../../../core-module/core.module';\nimport { Toast } from '../../../../services/toast';\nimport { JumpMark } from '../../../../services/jump-marks.service';\nimport { LocalEventsService } from 'ngx-edu-sharing-ui';\nimport { MdsEditorCoreComponent } from '../../../mds/mds-editor/mds-editor-core/mds-editor-core.component';\nimport { MdsEditorInstanceService } from '../../../mds/mds-editor/mds-editor-instance.service';\nimport { EditorType, UserPresentableError } from '../../../mds/types/types';\nimport { CARD_DIALOG_DATA, Closable } from '../../card-dialog/card-dialog-config';\nimport { JUMP_MARK_POSTFIX } from '../../card-dialog/card-dialog-container/jump-marks-handler.directive';\nimport { CardDialogRef } from '../../card-dialog/card-dialog-ref';\nimport { FillTypeStatus } from './input-fill-progress/input-fill-progress.component';\nimport {\n    hasNodes,\n    hasValues,\n    MdsEditorDialogData,\n    MdsEditorDialogResult,\n} from './mds-editor-dialog-data';\n\n@Component({\n    selector: 'es-mds-editor-dialog',\n    templateUrl: './mds-editor-dialog.component.html',\n    styleUrls: ['./mds-editor-dialog.component.scss'],\n    providers: [MdsEditorInstanceService],\n})\nexport class MdsEditorDialogComponent implements OnInit, AfterViewInit {\n    @ViewChild('customBottomBarContent') customBottomBarContent: TemplateRef<HTMLElement>;\n    @ViewChild(MdsEditorCoreComponent) mdsEditorCore: MdsEditorCoreComponent;\n\n    // Progress indicator\n    completedProperties: FillTypeStatus;\n    totalProperties: FillTypeStatus;\n\n    constructor(\n        @Inject(CARD_DIALOG_DATA) public data: MdsEditorDialogData,\n        private dialogRef: CardDialogRef<MdsEditorDialogData, MdsEditorDialogResult>,\n        private mdsEditorInstance: MdsEditorInstanceService,\n        private localEvents: LocalEventsService,\n        private toast: Toast,\n    ) {\n        this.dialogRef.patchState({ isLoading: true });\n    }\n\n    async ngOnInit(): Promise<void> {\n        await this.initMdsEditor();\n        this.initButtons();\n        this.registerProgressIndicator();\n        // `SendFeedbackDialog` works similar to this component. Please update accordingly when\n        // making changes here.\n        this.mdsEditorInstance.mdsInflated.pipe(first(), delay(0)).subscribe(() => {\n            this.dialogRef.patchState({ isLoading: false });\n            if (this.data.immediatelyShowMissingRequiredWidgets) {\n                this.mdsEditorInstance.showMissingRequiredWidgets(false);\n            }\n        });\n    }\n\n    ngAfterViewInit(): void {\n        this.registerJumpMarks();\n        this.dialogRef.patchConfig({\n            customBottomBarContent: this.customBottomBarContent,\n        });\n    }\n\n    onShowMissing(): void {\n        this.mdsEditorInstance.showMissingRequiredWidgets();\n    }\n\n    private async initMdsEditor(): Promise<void> {\n        let editorType: EditorType;\n        /*if (hasGraphql(this.data)) {\n            editorType = await this.mdsEditorInstance.initWithGraphqlData(\n                (this.data as MdsEditorDialogDataGraphql).graphqlIds,\n                {\n                    groupId: this.data.groupId,\n                    bulkBehavior: this.data.bulkBehavior,\n                    editorMode: 'nodes',\n                },\n            );\n        } else */\n        if (hasNodes(this.data)) {\n            editorType = await this.mdsEditorInstance.initWithNodes(this.data.nodes, {\n                groupId: this.data.groupId,\n                bulkBehavior: this.data.bulkBehavior,\n                editorMode: 'nodes',\n            });\n        } else if (hasValues(this.data)) {\n            editorType = await this.mdsEditorInstance.initWithoutNodes(\n                this.data.groupId,\n                this.data.setId,\n                this.data.repository,\n                this.data.editorMode,\n                this.data.values,\n            );\n        }\n        if (editorType !== 'angular') {\n            throw new Error(\n                'Called mds-editor-dialog with legacy mds. Supports only \"angular\" rendering.',\n            );\n        }\n    }\n\n    private initButtons(): void {\n        this.dialogRef.patchConfig({\n            buttons: [\n                new DialogButton('CANCEL', { color: 'standard' }, () =>\n                    this.dialogRef.close('CANCEL'),\n                ),\n                new DialogButton('SAVE', { color: 'primary' }, () => this.save()),\n            ],\n        });\n        this.mdsEditorInstance.observeHasUserChanges().subscribe((hasUserChanges) =>\n            this.dialogRef.patchConfig({\n                closable: hasUserChanges ? Closable.Confirm : Closable.Standard,\n            }),\n        );\n    }\n\n    private registerJumpMarks(): void {\n        rxjs.combineLatest([\n            this.mdsEditorInstance.activeViews,\n            this.mdsEditorInstance.shouldShowExtendedWidgets$,\n        ])\n            .pipe(\n                map(([activeViews]) =>\n                    activeViews.map((view) =>\n                        this.mdsEditorCore.viewRef?.find((v) => v.view.id === view.id),\n                    ),\n                ),\n                map((viewRef) =>\n                    viewRef\n                        .filter((v) => v && !v.isInHiddenState() && v.view.caption)\n                        .map(\n                            (v) =>\n                                new JumpMark(\n                                    v.view.id + JUMP_MARK_POSTFIX,\n                                    v.view.caption,\n                                    v.view.icon,\n                                ),\n                        ),\n                ),\n            )\n            .subscribe((jumpMarks) => this.dialogRef.patchConfig({ jumpMarks }));\n    }\n\n    private registerProgressIndicator(): void {\n        this.mdsEditorInstance\n            .observeCompletionStatus()\n            .pipe(filter((completionStatus) => !!completionStatus))\n            .subscribe((completionStatus) => {\n                this.completedProperties = mapDict(completionStatus, (entry) => entry.completed);\n                this.totalProperties = mapDict(completionStatus, (entry) => entry.total);\n            });\n    }\n\n    private async save(): Promise<void> {\n        if (this.mdsEditorInstance.getCanSave()) {\n            this.dialogRef.patchState({ isLoading: true });\n            try {\n                const updatedNodesOrValues = await this.mdsEditorInstance.save();\n                this.toast.toast('WORKSPACE.EDITOR.UPDATED');\n                this.dialogRef.close(updatedNodesOrValues);\n                if (hasNodes(this.data)) {\n                    this.localEvents.nodesChanged.emit(updatedNodesOrValues as Node[]);\n                }\n            } catch (e) {\n                this.handleError(e);\n                this.dialogRef.patchState({ isLoading: false });\n            }\n        } else {\n            // No changes, behave like close.\n            if (this.mdsEditorInstance.getIsValid()) {\n                this.dialogRef.close('NO-CHANGES');\n            } else {\n                this.mdsEditorInstance.showMissingRequiredWidgets();\n            }\n        }\n    }\n    private handleError(error: any): void {\n        console.error(error);\n        if (error instanceof UserPresentableError) {\n            this.toast.error(null, error.message);\n        } else {\n            this.toast.error(error);\n        }\n    }\n}\n\nfunction mapDict<K extends string, T, R>(\n    dict: { [key in K]: T },\n    f: (element: T) => R,\n): { [key in K]: R } {\n    return Object.entries(dict).reduce((acc, [key, value]) => {\n        acc[key as K] = f(value as T);\n        return acc;\n    }, {} as { [key in K]: R });\n}\n","<es-mds-editor-core></es-mds-editor-core>\n\n<ng-template #customBottomBarContent>\n  <es-input-fill-progress\n    [current]=\"completedProperties\"\n    [maximum]=\"totalProperties\"\n    (showMissing)=\"onShowMissing()\"\n  ></es-input-fill-progress>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../../../shared/shared.module';\nimport { MdsModule } from '../../../mds/mds.module';\nimport { InputFillProgressComponent } from './input-fill-progress/input-fill-progress.component';\nimport { MdsEditorDialogComponent } from './mds-editor-dialog.component';\n\nexport { MdsEditorDialogComponent };\n\n@NgModule({\n    declarations: [MdsEditorDialogComponent, InputFillProgressComponent],\n    imports: [SharedModule, MdsModule],\n})\nexport class MdsEditorDialogModule {}\n"],"names":["EventEmitter","RequiredMode","i0","ɵɵelementContainerStart","ɵɵtext","ɵɵelementStart","ɵɵlistener","InputFillProgressComponent_div_0_ng_container_10_Template_span_click_2_listener","ɵɵrestoreView","_r3","ctx_r2","ɵɵnextContext","ɵɵresetView","showMissing","emit","ɵɵelementEnd","ɵɵelementContainerEnd","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind1","ɵɵelement","ɵɵtemplate","InputFillProgressComponent_div_0_ng_container_10_Template","ɵɵclassMapInterpolate1","ctx_r0","getStatus","ɵɵstyleProp","maximum","mandatory","mandatoryForPublish","getSum","getFullProgress","ɵɵtextInterpolate2","ɵɵproperty","Mandatory","MandatoryForPublish","InputFillProgressComponent","constructor","type","Object","values","current","sum","optional","getPrimaryProgress","getCurrentMaximum","what","_","_2","selectors","inputs","outputs","decls","vars","consts","template","InputFillProgressComponent_Template","rf","ctx","InputFillProgressComponent_div_0_Template","rxjs","delay","filter","first","map","DialogButton","JumpMark","MdsEditorCoreComponent","MdsEditorInstanceService","UserPresentableError","CARD_DIALOG_DATA","Closable","JUMP_MARK_POSTFIX","hasNodes","hasValues","MdsEditorDialogComponent_ng_template_1_Template_es_input_fill_progress_showMissing_0_listener","onShowMissing","ctx_r1","completedProperties","totalProperties","MdsEditorDialogComponent","data","dialogRef","mdsEditorInstance","localEvents","toast","patchState","isLoading","ngOnInit","_this","_asyncToGenerator","initMdsEditor","initButtons","registerProgressIndicator","mdsInflated","pipe","subscribe","immediatelyShowMissingRequiredWidgets","showMissingRequiredWidgets","ngAfterViewInit","registerJumpMarks","patchConfig","customBottomBarContent","_this2","editorType","initWithNodes","nodes","groupId","bulkBehavior","editorMode","initWithoutNodes","setId","repository","Error","buttons","color","close","save","observeHasUserChanges","hasUserChanges","closable","Confirm","Standard","combineLatest","activeViews","shouldShowExtendedWidgets$","view","mdsEditorCore","viewRef","find","v","id","isInHiddenState","caption","icon","jumpMarks","observeCompletionStatus","completionStatus","mapDict","entry","completed","total","_this3","getCanSave","updatedNodesOrValues","nodesChanged","e","handleError","getIsValid","error","console","message","ɵɵdirectiveInject","i1","CardDialogRef","i2","i3","LocalEventsService","i4","Toast","viewQuery","MdsEditorDialogComponent_Query","MdsEditorDialogComponent_Template","MdsEditorDialogComponent_ng_template_1_Template","ɵɵtemplateRefExtractor","dict","f","entries","reduce","acc","key","value","SharedModule","MdsModule","MdsEditorDialogModule","_3","declarations","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}