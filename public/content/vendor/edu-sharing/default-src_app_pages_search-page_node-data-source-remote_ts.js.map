{"version":3,"file":"default-src_app_pages_search-page_node-data-source-remote_ts.js","mappings":"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","sources":["./src/app/pages/search-page/navigation-scheduler.ts","./src/app/pages/search-page/node-data-source-remote.ts","./src/app/pages/search-page/user-modifiable-values.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { Params, Router } from '@angular/router';\nimport { ScrollPositionRestorationService } from '../../services/scroll-position-restoration.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class NavigationScheduler {\n    private readonly appendTimeout = 500;\n\n    private timeout: ReturnType<typeof setTimeout> = null;\n    /** Route for next navigation execution. */\n    private route: string[] = [];\n    /** Query params for next navigation execution. */\n    private params: Params = null;\n    /** `replaceUrl` value for next navigation execution. */\n    private replaceUrl = true;\n    /** Skip scrolling to the top of the page for the next navigation execution. */\n    private skipScrollToTop = true;\n    /** While true, navigation actions will be appended to the previous navigation in history. */\n    private shouldAppend = false;\n\n    constructor(\n        private ngZone: NgZone,\n        private router: Router,\n        private scrollPositionRestoration: ScrollPositionRestorationService,\n    ) {}\n\n    /**\n     * Schedules the given parameters for navigation.\n     *\n     * Subsequently scheduled navigation actions will combined into a single call to\n     * `router.navigate`. After the execution of a navigation, there is a timeout (`appendTimeout`),\n     * during which newly scheduled navigation actions will be appended to history using\n     * `replaceUrl: true`.\n     *\n     * @param route will become the route to navigate to, replacing any route given in a previously\n     * scheduled navigation\n     * @param queryParams will be merged with other query params scheduled for navigation\n     * @param replaceUrl will navigate with `replaceUrl: true` if all of the executed navigation\n     * actions were scheduled with `replaceUrl: true` (default: `false`)\n     * @param skipScrollToTop will skip scrolling to the top of the page if all of the executed\n     * navigation actions were scheduled with `skipScrollToTop: true` (default `false`)\n     */\n    scheduleNavigation({\n        route,\n        queryParams,\n        replaceUrl = false,\n        skipScrollToTop = false,\n    }: {\n        route?: string[];\n        queryParams?: Params;\n        replaceUrl?: boolean;\n        skipScrollToTop?: boolean;\n    }): void {\n        if (route) {\n            this.route = route;\n        }\n        this.params = {\n            ...(this.params ?? {}),\n            ...(queryParams ?? {}),\n        };\n        if (!replaceUrl) {\n            this.replaceUrl = false;\n        }\n        if (!skipScrollToTop) {\n            this.skipScrollToTop = false;\n        }\n        // Schedule next navigation execution (if not already scheduled).\n        if (!this.timeout) {\n            this.timeout = setTimeout(() => {\n                // Execute navigation.\n                if (this.skipScrollToTop) {\n                    this.scrollPositionRestoration.skipNextScrollEvent();\n                }\n                void this.router.navigate(this.route, {\n                    queryParams: this.params,\n                    queryParamsHandling: 'merge',\n                    replaceUrl: this.shouldAppend || this.replaceUrl,\n                });\n                // Reset navigation parameters.\n                this.timeout = null;\n                this.route = [];\n                this.params = null;\n                this.replaceUrl = true;\n                this.skipScrollToTop = true;\n                // Setup append phase (if not already appending).\n                if (!this.shouldAppend) {\n                    this.shouldAppend = true;\n                    this.ngZone.runOutsideAngular(() =>\n                        setTimeout(() => (this.shouldAppend = false), this.appendTimeout),\n                    );\n                }\n            });\n        }\n    }\n}\n","/**\n * Some code from https://github.com/angular/components/blob/15.0.x/src/material/table/table-data-source.ts\n */\n\nimport { Injector } from '@angular/core';\nimport { Sort } from '@angular/material/sort';\nimport { MatTableDataSourcePageEvent, MatTableDataSourcePaginator } from '@angular/material/table';\nimport { ActivatedRoute } from '@angular/router';\nimport { GenericAuthority, Node, SearchResults } from 'ngx-edu-sharing-api';\nimport * as rxjs from 'rxjs';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject, Subscription } from 'rxjs';\nimport { debounceTime, map, switchMap, takeUntil, tap } from 'rxjs/operators';\nimport {\n    ItemsCap,\n    NodeCache,\n    NodeCacheRange,\n    NodeCacheSlice,\n    NodeDataSourceRemote as NodeDataSourceRemoteBase,\n    PaginationConfig,\n    SortPanel,\n} from 'ngx-edu-sharing-ui';\nimport { UserModifiableValuesService } from './user-modifiable-values';\n\ntype Range = NodeCacheRange;\n\nexport interface NodeRequestParams {\n    range: Range;\n    sort?: Sort;\n}\n\nexport interface NodeResponse<T> {\n    data: T[];\n    total: number;\n}\n\n// TODO: Rename to something like \"fetch implementation\" or \"request handler\"\nexport type NodeRemote<T> = (params: NodeRequestParams) => Observable<NodeResponse<T>>;\nexport class NodeDataSourceRemoteState {\n    _cache: {};\n    _pageIndex: number;\n    _pageSize: number;\n    _length: number;\n}\n\nlet nextId = 0;\n\nexport class NodeDataSourceRemote<\n    T extends Node | GenericAuthority = Node,\n    P extends MatTableDataSourcePaginator = MatTableDataSourcePaginator,\n> extends NodeDataSourceRemoteBase<T, P> {\n    get paginator(): P | null {\n        return this._paginationHandler.paginator;\n    }\n    set paginator(value: P | null) {\n        this._paginationHandler.paginator = value;\n    }\n    get sortPanel(): SortPanel | null {\n        return this._sortHandler.sortPanel;\n    }\n    set sortPanel(value: SortPanel | null) {\n        this._sortHandler.sortPanel = value;\n    }\n    private _paginationHandler = new PaginationHandler<P>(this._injector);\n    private _sortHandler = new SortHandler(this._injector);\n\n    private _remote: NodeRemote<T>;\n    private _renderChangesSubscription: Subscription | null = null;\n    private _cache = new NodeCache<T>();\n    set itemsCap(value: ItemsCap<T> | null) {\n        this._itemsCap = value;\n        // Only reconnect if already connected.\n        if (this.renderDataSubscription) {\n            this._connectRenderData();\n        }\n    }\n    // Even if the data source is not in a loading state until initialized, we expect that the\n    // required data is prepared elsewhere and we already show the loading spinner.\n    private _isLoading = new BehaviorSubject<boolean>(true);\n    private _initDone = false;\n    private _resetDone = false;\n    private _restoreFunction: () => NodeDataSourceRemoteState;\n    id = nextId++;\n\n    constructor(private _injector: Injector) {\n        super();\n        this._registerLoadingState();\n    }\n\n    connect(): Observable<T[]> {\n        if (!this.renderDataSubscription) {\n            this._connectRenderData();\n        }\n        return this.renderData;\n    }\n\n    disconnect() {}\n\n    init({\n        paginationConfig,\n        defaultSort,\n    }: {\n        paginationConfig: PaginationConfig;\n        defaultSort: Sort;\n    }): void {\n        this._paginationHandler.init(paginationConfig);\n        this._sortHandler.init(defaultSort);\n    }\n\n    setRemote(remote: NodeRemote<T>): void {\n        this._remote = remote;\n        this._updateRemoteSubscription();\n    }\n\n    getData() {\n        return this.renderData.value;\n    }\n\n    isEmpty(): boolean {\n        return this.dataStream.value?.length === 0;\n    }\n\n    hasMore() {\n        return this._paginationHandler.hasMore();\n    }\n\n    loadMore() {\n        return this._paginationHandler.loadMore();\n    }\n\n    getTotal() {\n        return this._paginationHandler.length;\n    }\n\n    observeTotal() {\n        return this.dataStream.pipe(map(() => this._paginationHandler.length));\n    }\n\n    appendData(appendData: T[], location: 'before' | 'after' = 'after') {\n        let data = this.dataStream.value;\n        if (location === 'after') {\n            data = data.concat(appendData);\n        } else {\n            data = appendData.concat(data);\n        }\n        this.dataStream.next(data);\n        this._paginationHandler.length += appendData.length;\n        this._cache.clear();\n    }\n\n    removeData(data: T[]): void {\n        const currentData = this.dataStream.value;\n        const deleteCount = currentData.filter((entry) => data.includes(entry)).length;\n        const updatedData = currentData.filter((entry) => !data.includes(entry));\n        this.dataStream.next(updatedData);\n        this._paginationHandler.length -= deleteCount;\n        this._cache.clear();\n    }\n\n    registerQueryParameters(route: ActivatedRoute): void {\n        this._paginationHandler.registerQueryParameters(route);\n        this._sortHandler.registerQueryParameters(route);\n    }\n\n    dumpState(): NodeDataSourceRemoteState {\n        // With this, we implicitly test for `_initDone` and `_resetDone`.\n        console.assert(this.isLoading === false, 'dumping state not supported while loading');\n        return {\n            _cache: { ...this._cache },\n            _pageIndex: this._paginationHandler.pageIndex,\n            _pageSize: this._paginationHandler.pageSize,\n            _length: this._paginationHandler.length,\n        };\n    }\n\n    registerRestoreFunction(restoreFunction: () => NodeDataSourceRemoteState): void {\n        this._restoreFunction = restoreFunction;\n    }\n\n    private _restoreState(state: NodeDataSourceRemoteState) {\n        Object.assign(this._cache, state._cache);\n        this._paginationHandler.pageIndex = state._pageIndex;\n        this._paginationHandler.pageSize = state._pageSize;\n        this._paginationHandler.length = state._length;\n    }\n\n    private _resetState(): void {\n        const restoreState = this._restoreFunction?.();\n        if (restoreState) {\n            this._restoreState(restoreState);\n        } else {\n            this._paginationHandler.length = null;\n            if (this._initDone) {\n                this._paginationHandler.firstPage();\n            }\n            this._cache.clear();\n        }\n    }\n\n    private _registerLoadingState(): void {\n        this._isLoading.subscribe((isLoading) => {\n            if (!isLoading) {\n                this.isLoading = false;\n            } else if (!this._initDone) {\n                this.isLoading = 'initial';\n            } else if (!this._resetDone) {\n                this.isLoading = 'reset';\n            } else {\n                this.isLoading = 'page';\n            }\n        });\n    }\n\n    private _connectRenderData(): void {\n        this.renderDataSubscription?.unsubscribe();\n        if (this.itemsCap) {\n            this.renderDataSubscription = this.itemsCap\n                .connect(this.dataStream)\n                .subscribe((data) => this.renderData.next(data));\n        } else {\n            this.renderDataSubscription = this.dataStream.subscribe((data) =>\n                this.renderData.next(data),\n            );\n        }\n    }\n\n    private _updateRemoteSubscription(): void {\n        this._resetDone = false;\n        this._resetState();\n        const sortChange = rxjs.merge(\n            this._sortHandler.sortChange.pipe(\n                tap(({ source }) => {\n                    this._resetDone = false;\n                    this._cache.clear();\n                    if (source === 'user') {\n                        this._paginationHandler.firstPage();\n                    }\n                }),\n            ),\n            this._sortHandler.initialized,\n        );\n        const pageChange: Observable<MatTableDataSourcePageEvent | void> = rxjs.merge(\n            this._paginationHandler.pageChange,\n            //   this._internalPageChanges,\n            this._paginationHandler.initialized,\n        );\n\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = rxjs\n            .combineLatest([sortChange, pageChange])\n            .pipe(\n                // Don't send multiple requests in case a sort change triggers a page change.\n                debounceTime(0),\n                map(() => this._cache.getMissingRange(this._getRequestRange())),\n                tap((missingRange) => missingRange && this._isLoading.next(true)),\n                switchMap((missingRange) => this._downloadAndCache(missingRange)),\n                map(() => this._cache.get(this._getDisplayRange())),\n                tap(() => {\n                    this._initDone = true;\n                    this._resetDone = true;\n                }),\n                tap({\n                    next: () => this._isLoading.next(false),\n                    error: () => this._isLoading.next(false),\n                }),\n            )\n            .subscribe((data) => this.dataStream.next(data));\n    }\n\n    private _getRequestRange(): Range {\n        const startIndex = this._paginationHandler.pageIndex * this._paginationHandler.pageSize;\n        let endIndex = (this._paginationHandler.pageIndex + 1) * this._paginationHandler.pageSize;\n        if (this._paginationHandler.length !== null) {\n            endIndex = Math.min(endIndex, this._paginationHandler.length);\n        }\n        return { startIndex, endIndex };\n    }\n\n    private _getDisplayRange(): Range {\n        const requestRange = this._getRequestRange();\n        return {\n            startIndex: requestRange.startIndex,\n            endIndex: Math.min(requestRange.endIndex, this._paginationHandler.length),\n        };\n    }\n\n    private _downloadAndCache(missingRange: Range): Observable<void> {\n        if (missingRange) {\n            return this._remote({ range: missingRange, sort: this._sortHandler.currentSort }).pipe(\n                tap((response) => (this._paginationHandler.length = response.total)),\n                tap((response) =>\n                    this._cache.add(this._getCacheSlice(missingRange, response.data)),\n                ),\n\n                map(() => void 0),\n            );\n        } else {\n            return rxjs.of(null);\n        }\n    }\n\n    private _getCacheSlice(range: Range, data: T[]): NodeCacheSlice<T> {\n        return {\n            startIndex: range.startIndex,\n            endIndex: Math.min(range.endIndex, range.startIndex + data.length),\n            data,\n        };\n    }\n}\n\nexport function fromSearchResults(searchResults: SearchResults): NodeResponse<Node> {\n    return {\n        data: searchResults.nodes,\n        total: searchResults.pagination.total,\n    };\n}\n\n/**\n * A layer between the data source and a paginator component or an infinite-scroll paginator.\n *\n * Without this, the data source would need to wait for a paginator component to be added to the DOM\n * to send its first request. Also, the data source would not be able to function without the\n * paginator component or directive constantly available in the DOM.\n */\nclass PaginationHandler<P extends MatTableDataSourcePaginator = MatTableDataSourcePaginator> {\n    private _paginator: P;\n    get paginator(): P {\n        return this._paginator;\n    }\n    set paginator(value: P) {\n        this._paginator = value;\n        this._initPaginator(value);\n    }\n    private _config: PaginationConfig;\n    private _pageIndex = 0;\n    get pageIndex() {\n        return this._pageIndex;\n    }\n    set pageIndex(value) {\n        this._pageIndex = value;\n        if (this.paginator) {\n            this.paginator.pageIndex = value;\n        }\n    }\n    private _pageSize: number;\n    get pageSize(): number {\n        return this._pageSize;\n    }\n    set pageSize(value: number) {\n        this._pageSize = value;\n        if (this.paginator) {\n            this.paginator.pageSize = value;\n        }\n    }\n    private _length: number = null;\n    get length() {\n        return this._length;\n    }\n    set length(value) {\n        this._length = value;\n        if (this.paginator) {\n            this.paginator.length = value;\n        }\n    }\n\n    private readonly _initialized = new ReplaySubject<void>();\n    initialized = this._initialized.asObservable();\n    private _isInitialized = false;\n    private readonly _pageChange = new Subject<MatTableDataSourcePageEvent>();\n    pageChange = this._pageChange.asObservable();\n    private readonly _paginatorReset = new Subject<void>();\n\n    constructor(private _injector: Injector) {}\n\n    init(config: PaginationConfig): void {\n        this._config = config;\n        this.pageSize = config.defaultPageSize;\n        this._isInitialized = true;\n        this._initialized.next();\n        this._initialized.complete();\n    }\n\n    firstPage(): void {\n        const previousPageIndex = this.pageIndex;\n        const previousPageSize = this.pageSize;\n        this.pageIndex = 0;\n        if (this._config.strategy === 'infinite-scroll') {\n            this.pageSize = this._config.defaultPageSize;\n        }\n        if (previousPageIndex !== this.pageIndex || previousPageSize !== this.pageSize) {\n            this._emitPageEvent();\n        }\n    }\n\n    hasMore(): boolean {\n        if (!this._isInitialized) {\n            return undefined;\n        }\n        return this.length > (this.pageIndex + 1) * this.pageSize;\n    }\n\n    /**\n     * @returns Whether there is more data to load\n     */\n    loadMore(): boolean {\n        if (this._config.strategy !== 'infinite-scroll') {\n            console.warn(\n                `Called loadMore with pagination strategy ${this._config.strategy}.`,\n                `The only supported strategy for loadMore is 'infinite-scroll'.`,\n            );\n            return false;\n        }\n        if (this.hasMore()) {\n            this.pageSize = Math.min(this.pageSize + this._config.defaultPageSize, this.length);\n            this._emitPageEvent();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    registerQueryParameters(route: ActivatedRoute): void {\n        if (!this._isInitialized) {\n            throw new Error('Tried to register query params before initializing');\n        } else if (this._config.strategy === 'infinite-scroll') {\n            // Nothing to store in query params when using infinite scrolling.\n            return;\n        }\n        const userModifiableValue = this._injector.get(UserModifiableValuesService);\n        const pageIndex = userModifiableValue.createMapped<number>(\n            {\n                toString: (value) => (value + 1).toString(),\n                fromString: (value) => parseInt(value) - 1,\n            },\n            0,\n        );\n        const pageSize = userModifiableValue.createMapped<number>(\n            {\n                toString: (value) => value.toString(),\n                fromString: (value) => parseInt(value),\n            },\n            this._config.defaultPageSize,\n        );\n        pageIndex.registerQueryParameter('page', route);\n        pageSize.registerQueryParameter('pageSize', route);\n        rxjs.combineLatest([pageIndex.observeValue(), pageSize.observeValue()]).subscribe(\n            ([pageIndex, pageSize]) => {\n                this.pageIndex = pageIndex;\n                this.pageSize = pageSize;\n                this._emitPageEvent();\n            },\n        );\n        this.pageChange.subscribe((event) => {\n            pageIndex.setUserValue(event.pageIndex);\n            pageSize.setUserValue(event.pageSize);\n        });\n    }\n\n    private _initPaginator(paginator: MatTableDataSourcePaginator): void {\n        this._paginatorReset.next();\n        if (paginator) {\n            paginator.pageIndex = this.pageIndex;\n            paginator.pageSize = this.pageSize;\n            paginator.length = this.length;\n            paginator.page.pipe(takeUntil(this._paginatorReset)).subscribe((pageEvent) => {\n                this.pageIndex = pageEvent.pageIndex;\n                this.pageSize = pageEvent.pageSize;\n                this.length = pageEvent.length;\n                this._emitPageEvent();\n            });\n        }\n    }\n\n    private _emitPageEvent(): void {\n        this._pageChange.next({\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n}\n\nclass SortHandler {\n    private _sortPanel: SortPanel;\n    get sortPanel(): SortPanel {\n        return this._sortPanel;\n    }\n    set sortPanel(value: SortPanel) {\n        this._sortPanel = value;\n        this._initSortPanel(value);\n    }\n    private readonly _sortChange = new Subject<Sort & { source: 'query-params' | 'user' }>();\n    readonly sortChange = this._sortChange.asObservable();\n    private readonly _initialized = new ReplaySubject<void>();\n    readonly initialized = this._initialized.asObservable();\n    private _isInitialized = false;\n\n    private _defaultSort: Readonly<Sort>;\n    private _currentSort: Readonly<Sort>;\n    get currentSort(): Readonly<Sort> {\n        return this._currentSort;\n    }\n    private set currentSort(value: Readonly<Sort>) {\n        this._currentSort = value;\n        if (this.sortPanel) {\n            this.sortPanel.active = value.active;\n            this.sortPanel.direction = value.direction;\n        }\n    }\n    private readonly _sortPanelReset = new Subject<void>();\n\n    constructor(private _injector: Injector) {}\n\n    init(defaultSort: Sort): void {\n        defaultSort = { active: defaultSort?.active, direction: defaultSort?.direction };\n        this._defaultSort = defaultSort;\n        this.currentSort = defaultSort;\n        this._isInitialized = true;\n        this._initialized.next();\n        this._initialized.complete();\n    }\n\n    private _changeSort(sort: Sort, source: 'query-params' | 'user'): void {\n        if (!sort.direction) {\n            sort = this._defaultSort;\n        }\n        if (\n            this.currentSort.active !== sort.active ||\n            this.currentSort.direction !== sort.direction\n        ) {\n            this.currentSort = { ...sort };\n            this._sortChange.next({ ...sort, source });\n        }\n    }\n\n    registerQueryParameters(route: ActivatedRoute): void {\n        if (!this._isInitialized) {\n            throw new Error('Tried to register query params before initializing');\n        }\n        // @TODO\n        /*\n        const userModifiableValue = this._injector.get(UserModifiableValuesService);\n        const sortActive = userModifiableValue.createString(this._defaultSort?.active);\n        const sortDirection = userModifiableValue.createString<SortDirection>(\n            this._defaultSort?.direction,\n        );\n        sortActive.registerQueryParameter('sortBy', route, { skipScrollToTop: true });\n        sortDirection.registerQueryParameter('sortDirection', route, { skipScrollToTop: true });\n        rxjs.combineLatest([sortActive.observeValue(), sortDirection.observeValue()]).subscribe(\n            ([active, direction]) => this._changeSort({ active, direction }, 'query-params'),\n        );\n        this.sortChange.subscribe((event) => {\n            sortActive.setUserValue(event.active);\n            sortDirection.setUserValue(event.direction);\n        });\n         */\n    }\n\n    private _initSortPanel(sortPanel: SortPanel): void {\n        this._sortPanelReset.next();\n        if (sortPanel) {\n            sortPanel.active = this.currentSort?.active;\n            sortPanel.direction = this.currentSort?.direction;\n            sortPanel.sortChange.pipe(takeUntil(this._sortPanelReset)).subscribe((sortEvent) => {\n                this._changeSort(sortEvent, 'user');\n            });\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport * as rxjs from 'rxjs';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { notNull } from 'ngx-edu-sharing-ui';\nimport { NavigationScheduler } from './navigation-scheduler';\n\n/**\n * Provides a factory for user-modifiable values.\n *\n * The concept is to provide a value that has a system default, can be changed by the user, or be\n * overridden by the system, while keeping track of each value explicitly.\n *\n * We provide methods for controlling the user value with (reactive) forms and for tracking the\n * user value as query parameter.\n */\n@Injectable({ providedIn: 'root' })\nexport class UserModifiableValuesService {\n    constructor(\n        navigationScheduler: NavigationScheduler,\n        //  preferences: SessionStorageService\n    ) {\n        UserModifiableValue.navigationScheduler = navigationScheduler;\n        // UserModifiableValue.preferences = preferences;\n    }\n\n    createDict(systemValue?: { [key: string]: any }): UserModifiableValue<{ [key: string]: any }> {\n        return new UserModifiableValue(userModifiableDictType, systemValue);\n    }\n\n    createString<S extends string>(systemValue?: S): UserModifiableValue<S> {\n        return new UserModifiableValue(new UserModifiableStringType<S>(), systemValue);\n    }\n\n    createMapped<T>(mapping: Mapping<T>, systemValue?: T): UserModifiableValue<T> {\n        return new UserModifiableValue<T>(new UserModifiableMappedType(mapping), systemValue);\n    }\n\n    createBoolean(systemValue?: boolean): UserModifiableValue<boolean> {\n        return new UserModifiableValue(userModifiableBooleanType, systemValue);\n    }\n}\n\n/**\n * Represents a value that has a system default and can be modified by the user.\n *\n * Allows to sync the value with a query parameter such that only values changed by the user will be\n * reflected in the query parameters.\n */\nexport class UserModifiableValue<T> {\n    static navigationScheduler: NavigationScheduler;\n    // static preferences: SessionStorageService;\n\n    /**\n     * Shorthand for registration with two-way bindings, e.g.,\n     *\n     *      [(someVariable)]=\"someUserModifiableValue.value\"\n     */\n    get value(): T {\n        return this.getValue();\n    }\n    set value(value: T) {\n        this.setUserValue(value);\n    }\n\n    private _systemValue = new BehaviorSubject<T>(this._type.null);\n    private _userValue = new BehaviorSubject<T>(null);\n    private _overrideValue = new BehaviorSubject<{ useOverride: boolean; value?: T }>({\n        useOverride: false,\n    });\n    private _mergedValue = new BehaviorSubject<T>(null);\n    private _queryParam: string;\n\n    constructor(private _type: UserModifiableType<T>, initialSystemValue?: T) {\n        if (initialSystemValue !== undefined) {\n            this.setSystemValue(initialSystemValue);\n        }\n        this._getMergedValue().subscribe(this._mergedValue);\n    }\n\n    /**\n     * Sets the default system value, that will be used when no user value is set.\n     */\n    setSystemValue(value: T): void {\n        if (this._serialize(value) !== this._serialize(this._systemValue.value)) {\n            this._systemValue.next(value);\n        }\n    }\n\n    /**\n     * Sets the user value, that will replace or be merged with the system value.\n     */\n    setUserValue(value: T): void {\n        if (this._serialize(value) !== this._serialize(this._userValue.value)) {\n            // console.log('setUserValue', { value, systemValue: this._systemValue.value });\n            if (this._serialize(value) === this._serialize(this._systemValue.value)) {\n                this.resetUserValue();\n            } else {\n                this._userValue.next(value);\n            }\n        }\n    }\n\n    resetUserValue(): void {\n        if (this._userValue.value !== null) {\n            // console.log('resetUserValue');\n            this._userValue.next(null);\n        }\n    }\n\n    getUserValue(): T {\n        return this._userValue.value;\n    }\n\n    observeUserValue(): Observable<T> {\n        return this._userValue.asObservable();\n    }\n\n    /**\n     * Sets an override value that will supersede any user and system values.\n     */\n    setOverrideValue(value: T): void {\n        if (\n            !this._overrideValue.value.useOverride ||\n            this._serialize(this._overrideValue.value.value) !== this._serialize(value)\n        ) {\n            this._overrideValue.next({ useOverride: true, value });\n        }\n    }\n\n    unsetOverrideValue(): void {\n        if (this._overrideValue.value.useOverride) {\n            this._overrideValue.next({ useOverride: false });\n        }\n    }\n\n    getValue(): T {\n        return this._mergedValue.value;\n    }\n\n    observeValue(): Observable<T> {\n        return this._mergedValue.asObservable();\n    }\n\n    getQueryParamEntry(value: T = this.getValue()): { [key: string]: string } {\n        const serializedValue = this._serialize(value);\n        if (serializedValue === this._serialize(this._systemValue.value)) {\n            return {};\n        } else {\n            return { [this._queryParam]: serializedValue };\n        }\n    }\n\n    observeQueryParamEntry(): Observable<{ [key: string]: string }> {\n        return this.observeValue().pipe(map((value) => this.getQueryParamEntry(value)));\n    }\n\n    registerQueryParameter(\n        key: string,\n        activatedRoute: ActivatedRoute,\n        { replaceUrl = false, skipScrollToTop = false } = {},\n    ): void {\n        if (this._queryParam) {\n            console.warn(\n                `Registered user value for query parameter ${key} ` +\n                    `which is already registered for query parameter ${this._queryParam}`,\n            );\n        }\n        this._queryParam = key;\n        let currentParam: string;\n        activatedRoute.queryParams\n            .pipe(\n                map((params) => params[key] as string),\n                distinctUntilChanged(),\n                filter((param) => param !== currentParam),\n                tap((param) => (currentParam = param)),\n                map((param) => this._deserialize(param)),\n                // tap((queryParam) => console.log('queryParams', { key, queryParam })),\n            )\n            .subscribe((value) => this.setUserValue(value));\n        this._userValue\n            .pipe(\n                map((value) => this._serialize(value)),\n                filter((param) => param !== currentParam),\n                tap((param) => (currentParam = param)),\n            )\n            .subscribe((param) => {\n                UserModifiableValue.navigationScheduler.scheduleNavigation({\n                    queryParams: { [key]: param },\n                    replaceUrl,\n                    skipScrollToTop,\n                });\n            });\n    }\n\n    registerSessionStorage(key: string): void {\n        // Query the storage value only once on registration. We expect to be the only one accessing\n        // this value.\n        let storageValue = sessionStorage.getItem(key);\n        if (notNull(storageValue)) {\n            this.setUserValue(this._deserialize(storageValue));\n        }\n        this._userValue.pipe(map((value) => this._serialize(value))).subscribe((value) => {\n            if (storageValue !== value) {\n                storageValue = value;\n                if (notNull(value)) {\n                    sessionStorage.setItem(key, value);\n                } else {\n                    sessionStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    // registerProfilePreference(key: string, until: Observable<void>): void {\n    //     let currentStorageValue: string;\n    //     UserModifiableValue.preferences\n    //         .observe(key)\n    //         .pipe(\n    //             filter((value: T) => this._serialize(value) !== currentStorageValue),\n    //             tap((value: T) => (currentStorageValue = this._serialize(value))),\n    //             takeUntil(until),\n    //         )\n    //         .subscribe((value: T) => this.setUserValue(value));\n    //     this._userValue\n    //         .pipe(filter((value: T) => this._serialize(value) !== currentStorageValue))\n    //         .subscribe((userValue) => UserModifiableValue.preferences.set(key, userValue));\n    // }\n\n    registerFormControl(formControl: UntypedFormControl): void {\n        this.observeValue()\n            .pipe(\n                map((value) => this._serialize(value)),\n                filter((value) => value !== formControl.value),\n            )\n            .subscribe((value) => formControl.setValue(value));\n        formControl.valueChanges\n            .pipe(\n                map((value) => this._deserialize(value)),\n                // tap((value) => console.log('formControl', value)),\n            )\n            .subscribe((value) => this.setUserValue(value));\n    }\n\n    private _serialize(value: T | null): string | null {\n        if (notNull(value)) {\n            return this._type.serialize(value);\n        } else {\n            return null;\n        }\n    }\n\n    private _deserialize(value: string | null): T | null {\n        if (notNull(value)) {\n            return this._type.deserialize(value);\n        } else {\n            return null;\n        }\n    }\n\n    private _getMergedValue(): Observable<T> {\n        return rxjs.combineLatest([this._systemValue, this._userValue, this._overrideValue]).pipe(\n            map(([systemValue, userValue, overrideValue]) =>\n                overrideValue.useOverride\n                    ? overrideValue.value\n                    : this._type.merge(systemValue, userValue),\n            ),\n            distinctUntilChanged(),\n        );\n    }\n}\n\ninterface UserModifiableType<T> {\n    null: T;\n    merge: (defaultValue: T, userValue: T) => T;\n    serialize: (value: T) => string;\n    deserialize: (value: string) => T;\n}\n\nconst userModifiableDictType: UserModifiableType<{ [key: string]: any }> = {\n    null: {},\n    merge: (defaultValue: { [key: string]: any }, userValue: { [key: string]: any }) => ({\n        ...defaultValue,\n        ...userValue,\n    }),\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n};\n\nclass UserModifiableStringType<S extends string> implements UserModifiableType<S> {\n    null: S = null;\n    merge = (defaultValue: S, userValue: S) => userValue ?? defaultValue;\n    serialize = (value: S) => value;\n    deserialize = (value: string) => value as S;\n}\n\ninterface Mapping<T> {\n    toString: (value: T) => string;\n    fromString: (value: string) => T;\n}\n\nclass UserModifiableMappedType<T> implements UserModifiableType<T> {\n    null: T = null;\n    merge = (defaultValue: T, userValue: T) => userValue ?? defaultValue;\n    serialize = this.mapping.toString;\n    deserialize = this.mapping.fromString;\n\n    constructor(private mapping: Mapping<T>) {}\n}\n\nconst userModifiableBooleanType: UserModifiableType<boolean> = {\n    null: false,\n    merge: (defaultValue: boolean, userValue: boolean) => userValue ?? defaultValue,\n    serialize: (value: boolean) => (value ? 'true' : 'false'),\n    deserialize: (value: string) => value === 'true',\n};\n"],"names":["NavigationScheduler","constructor","ngZone","router","scrollPositionRestoration","appendTimeout","timeout","route","params","replaceUrl","skipScrollToTop","shouldAppend","scheduleNavigation","queryParams","setTimeout","skipNextScrollEvent","navigate","queryParamsHandling","runOutsideAngular","_","i0","ɵɵinject","NgZone","i1","Router","i2","ScrollPositionRestorationService","_2","factory","ɵfac","providedIn","rxjs","BehaviorSubject","ReplaySubject","Subject","debounceTime","map","switchMap","takeUntil","tap","NodeCache","NodeDataSourceRemote","NodeDataSourceRemoteBase","UserModifiableValuesService","NodeDataSourceRemoteState","nextId","paginator","_paginationHandler","value","sortPanel","_sortHandler","itemsCap","_itemsCap","renderDataSubscription","_connectRenderData","_injector","PaginationHandler","SortHandler","_renderChangesSubscription","_cache","_isLoading","_initDone","_resetDone","id","_registerLoadingState","connect","renderData","disconnect","init","paginationConfig","defaultSort","setRemote","remote","_remote","_updateRemoteSubscription","getData","isEmpty","dataStream","length","hasMore","loadMore","getTotal","observeTotal","pipe","appendData","location","data","concat","next","clear","removeData","currentData","deleteCount","filter","entry","includes","updatedData","registerQueryParameters","dumpState","console","assert","isLoading","_pageIndex","pageIndex","_pageSize","pageSize","_length","registerRestoreFunction","restoreFunction","_restoreFunction","_restoreState","state","Object","assign","_resetState","restoreState","firstPage","subscribe","unsubscribe","sortChange","merge","source","initialized","pageChange","combineLatest","getMissingRange","_getRequestRange","missingRange","_downloadAndCache","get","_getDisplayRange","error","startIndex","endIndex","Math","min","requestRange","range","sort","currentSort","response","total","add","_getCacheSlice","of","fromSearchResults","searchResults","nodes","pagination","_paginator","_initPaginator","_initialized","asObservable","_isInitialized","_pageChange","_paginatorReset","config","_config","defaultPageSize","complete","previousPageIndex","previousPageSize","strategy","_emitPageEvent","undefined","warn","Error","userModifiableValue","createMapped","toString","fromString","parseInt","registerQueryParameter","observeValue","event","setUserValue","page","pageEvent","_sortPanel","_initSortPanel","_currentSort","active","direction","_sortChange","_sortPanelReset","_defaultSort","_changeSort","sortEvent","distinctUntilChanged","notNull","navigationScheduler","UserModifiableValue","createDict","systemValue","userModifiableDictType","createString","UserModifiableStringType","mapping","UserModifiableMappedType","createBoolean","userModifiableBooleanType","getValue","_type","initialSystemValue","_systemValue","null","_userValue","_overrideValue","useOverride","_mergedValue","setSystemValue","_getMergedValue","_serialize","resetUserValue","getUserValue","observeUserValue","setOverrideValue","unsetOverrideValue","getQueryParamEntry","serializedValue","_queryParam","observeQueryParamEntry","key","activatedRoute","currentParam","param","_deserialize","registerSessionStorage","storageValue","sessionStorage","getItem","setItem","removeItem","registerFormControl","formControl","setValue","valueChanges","serialize","deserialize","userValue","overrideValue","defaultValue","JSON","stringify","parse"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}