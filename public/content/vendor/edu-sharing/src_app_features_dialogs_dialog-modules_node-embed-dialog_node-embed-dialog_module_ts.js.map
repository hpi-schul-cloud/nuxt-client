{"version":3,"file":"src_app_features_dialogs_dialog-modules_node-embed-dialog_node-embed-dialog_module_ts.js","mappings":"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","sources":["./src/app/features/dialogs/dialog-modules/node-embed-dialog/node-embed-dialog.component.ts","./src/app/features/dialogs/dialog-modules/node-embed-dialog/node-embed-dialog.component.html","./src/app/features/dialogs/dialog-modules/node-embed-dialog/node-embed-dialog.module.ts"],"sourcesContent":["import { Location } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Inject,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { startWith, take } from 'rxjs/operators';\nimport { DialogButton, RestConstants, RestHelper } from '../../../../core-module/core.module';\nimport { Toast, ToastType } from '../../../../services/toast';\nimport { UIHelper } from '../../../../core-ui-module/ui-helper';\nimport { Node } from '../../../../core-module/rest/data-object';\nimport { MainNavService } from '../../../../main/navigation/main-nav.service';\nimport { CARD_DIALOG_DATA, Closable } from '../../card-dialog/card-dialog-config';\nimport { CardDialogRef } from '../../card-dialog/card-dialog-ref';\nimport { DialogsService } from '../../dialogs.service';\n\nexport interface NodeEmbedDialogData {\n    node: Node;\n}\n\n/**\n * Dialog to generate an embed snippet for a node.\n */\n@Component({\n    selector: 'es-node-embed-dialog',\n    templateUrl: './node-embed-dialog.component.html',\n    styleUrls: ['./node-embed-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NodeEmbedDialogComponent implements OnInit, OnDestroy {\n    @ViewChild('textarea') textareaRef: ElementRef<HTMLTextAreaElement>;\n\n    readonly buttons = [new DialogButton('OPTIONS.COPY', { color: 'primary' }, () => this.copy())];\n\n    readonly sizeConstraints = {\n        width: { min: 300, max: 1200 },\n        height: { min: 200, max: 1200 },\n    };\n\n    readonly form = new UntypedFormGroup({\n        width: new UntypedFormControl(400, [\n            Validators.min(this.sizeConstraints.width.min),\n            Validators.max(this.sizeConstraints.width.max),\n        ]),\n        height: new UntypedFormControl(300, [\n            Validators.min(this.sizeConstraints.height.min),\n            Validators.max(this.sizeConstraints.height.max),\n        ]),\n        version: new UntypedFormControl('fixed'),\n    });\n\n    embedCode = '';\n    showNotPublicWarning = false;\n\n    private readonly destroyed$ = new Subject<void>();\n\n    constructor(\n        @Inject(CARD_DIALOG_DATA) public data: NodeEmbedDialogData,\n        private dialogRef: CardDialogRef,\n        private dialogs: DialogsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private location: Location,\n        private mainNav: MainNavService,\n        private ngZone: NgZone,\n        private router: Router,\n        private toast: Toast,\n    ) {}\n\n    ngOnInit(): void {\n        this.dialogRef.patchConfig({ buttons: this.buttons });\n        this.registerFormChanges();\n        this.registerNotPublicWarning();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n\n    async openInviteDialog(): Promise<void> {\n        const dialogRef = await this.dialogs.openShareDialog({ nodes: [this.data.node] });\n        dialogRef.afterClosed().subscribe(() => {\n            // TODO: Update `isPublic` if necessary.\n        });\n    }\n\n    private registerFormChanges(): void {\n        this.form.valueChanges.pipe(startWith(this.form.value)).subscribe((values) => {\n            if (this.form.valid) {\n                this.embedCode = this.getEmbedCode(values);\n                // Run a second change detection for `cdkTextareaAutosize` on the embed-code\n                // textarea.\n                this.ngZone.runOutsideAngular(() =>\n                    setTimeout(() => this.changeDetectorRef.detectChanges()),\n                );\n            }\n            this.buttons[0].disabled = !this.form.valid;\n        });\n        // The dialog is closable by backdrop click until any value has been changed.\n        this.form.valueChanges.pipe(take(1)).subscribe(() => {\n            this.dialogRef.patchConfig({ closable: Closable.Standard });\n        });\n    }\n\n    private registerNotPublicWarning() {\n        // TODO\n        //\n        // observeIsPublic(node)\n        //     .pipe(takeUntil(this.destroyed$))\n        //     .subscribe((isPublic) => (this.showNotPublicWarning = !isPublic));\n    }\n\n    private async copy(): Promise<void> {\n        UIHelper.copyElementToClipboard(this.textareaRef.nativeElement);\n        this.toast.show({\n            message: 'EMBED.COPIED_TO_CLIPBOARD_NOTICE',\n            type: 'info',\n            subtype: ToastType.InfoSimple,\n        });\n    }\n\n    private getEmbedCode(values: any): string {\n        const node = this.data.node;\n        // We use `createElement` to have attributes sanitized. Note that occurrences of `&` in the\n        // attribute `src` are rightfully escaped to `&amp;`.\n        const iFrame = document.createElement('iframe');\n        iFrame.src = this.getEmbedLink(node, values.version);\n        iFrame.title = RestHelper.getTitle(node);\n        iFrame.width = values.width;\n        iFrame.height = values.height;\n        iFrame.frameBorder = '0';\n        iFrame.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\n        return iFrame.outerHTML;\n    }\n\n    private getEmbedLink(node: Node, version: 'fixed' | 'newest'): string {\n        // Note that this does not work when the application itself is used in an embedded context\n        // since this method relies on the current page's URL to match the origin and base HREF of\n        // the backend.\n        const routerLink = 'eduservlet/render';\n        const queryParams = {\n            node_id: node.ref.id,\n            version:\n                version === 'fixed' && !this.isCollectionReference() ? node.content.version : null,\n            // Currently, `RenderingServlet` only supports local nodes. Uncomment, when other\n            // repositories become supported.\n            //\n            // repository: node.ref.isHomeRepo ? null : node.ref.repo,\n        };\n        const urlTree = this.router.createUrlTree([routerLink], { queryParams });\n        return location.origin + this.location.prepareExternalUrl(urlTree.toString());\n    }\n    isCollectionReference() {\n        return this.data.node.aspects.includes(RestConstants.CCM_ASPECT_IO_REFERENCE);\n    }\n}\n","<div class=\"content-container\">\n  <div class=\"preview-container\">\n    <div class=\"preview\" [innerHTML]=\"embedCode | safeHtml\"></div>\n  </div>\n  <div class=\"preferences-container\">\n    <es-info-message *ngIf=\"showNotPublicWarning\" mode=\"warning\">\n      <p class=\"not-public-warning-message\">{{ 'EMBED.NOT_PUBLIC_WARNING' | translate }}</p>\n      <div>\n        <button mat-button (click)=\"openInviteDialog()\">\n          <i esIcon=\"arrow_forward\"></i>\n          {{ 'OPTIONS.INVITE' | translate }}\n        </button>\n      </div>\n    </es-info-message>\n    <div class=\"not-public-warning-container\"></div>\n    <mat-form-field class=\"embed-code-field\" appearance=\"fill\">\n      <!-- <mat-label>{{ 'EMBED.CODE_LABEL' | translate }}</mat-label> -->\n      <textarea\n        #textarea\n        matInput\n        [readonly]=\"true\"\n        [attr.aria-label]=\"'EMBED.CODE_LABEL' | translate\"\n        cdkTextareaAutosize\n        cdkAutosizeMinRows=\"2\"\n        cdkAutosizeMaxRows=\"10\"\n        (focus)=\"textarea.select()\"\n        [disabled]=\"!form.valid\"\n        >{{ embedCode }}</textarea\n      >\n    </mat-form-field>\n    <form class=\"preferences-form\" [formGroup]=\"form\">\n      <mat-radio-group\n        *ngIf=\"!isCollectionReference()\"\n        class=\"version-radio-group\"\n        [attr.aria-label]=\"'EMBED.VERSION' | translate\"\n        formControlName=\"version\"\n      >\n        <mat-radio-button value=\"fixed\">{{\n          'EMBED.VERSION_OPTION.FIXED' | translate\n        }}</mat-radio-button>\n        <mat-radio-button value=\"newest\">{{\n          'EMBED.VERSION_OPTION.NEWEST' | translate\n        }}</mat-radio-button>\n      </mat-radio-group>\n      <div class=\"size-fields-container\">\n        <mat-form-field class=\"size-field\">\n          <mat-label>{{ 'EMBED.WIDTH' | translate }}</mat-label>\n          <input\n            matInput\n            type=\"number\"\n            formControlName=\"width\"\n            [min]=\"sizeConstraints.width.min\"\n            [max]=\"sizeConstraints.width.max\"\n          />\n          <mat-error>\n            {{ 'EMBED.SIZE_CONSTRAINTS_ERROR_NOTICE' | translate : sizeConstraints.width }}\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"size-field\">\n          <mat-label>{{ 'EMBED.HEIGHT' | translate }}</mat-label>\n          <input\n            matInput\n            type=\"number\"\n            formControlName=\"height\"\n            [min]=\"sizeConstraints.height.min\"\n            [max]=\"sizeConstraints.height.max\"\n          />\n          <mat-error>\n            {{ 'EMBED.SIZE_CONSTRAINTS_ERROR_NOTICE' | translate : sizeConstraints.height }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </form>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../../../shared/shared.module';\nimport { NodeEmbedDialogComponent } from './node-embed-dialog.component';\n\nexport { NodeEmbedDialogComponent };\n\n@NgModule({\n    declarations: [NodeEmbedDialogComponent],\n    imports: [SharedModule],\n})\nexport class NodeEmbedDialogModule {}\n"],"names":["UntypedFormControl","UntypedFormGroup","Validators","Subject","startWith","take","DialogButton","RestConstants","RestHelper","ToastType","UIHelper","CARD_DIALOG_DATA","Closable","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","NodeEmbedDialogComponent_es_info_message_5_Template_button_click_5_listener","ɵɵrestoreView","_r4","ctx_r3","ɵɵnextContext","ɵɵresetView","openInviteDialog","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","ɵɵtextInterpolate1","ɵɵattribute","NodeEmbedDialogComponent","constructor","data","dialogRef","dialogs","changeDetectorRef","location","mainNav","ngZone","router","toast","buttons","color","copy","sizeConstraints","width","min","max","height","form","version","embedCode","showNotPublicWarning","destroyed$","ngOnInit","patchConfig","registerFormChanges","registerNotPublicWarning","ngOnDestroy","next","complete","_this","_asyncToGenerator","openShareDialog","nodes","node","afterClosed","subscribe","valueChanges","pipe","value","values","valid","getEmbedCode","runOutsideAngular","setTimeout","detectChanges","disabled","closable","Standard","_this2","copyElementToClipboard","textareaRef","nativeElement","show","message","type","subtype","InfoSimple","iFrame","document","createElement","src","getEmbedLink","title","getTitle","frameBorder","allow","outerHTML","routerLink","queryParams","node_id","ref","id","isCollectionReference","content","urlTree","createUrlTree","origin","prepareExternalUrl","toString","aspects","includes","CCM_ASPECT_IO_REFERENCE","_","ɵɵdirectiveInject","i1","CardDialogRef","i2","DialogsService","ChangeDetectorRef","i3","Location","i4","MainNavService","NgZone","i5","Router","i6","Toast","_2","selectors","viewQuery","NodeEmbedDialogComponent_Query","rf","ctx","ɵɵtemplate","NodeEmbedDialogComponent_es_info_message_5_Template","NodeEmbedDialogComponent_Template_textarea_focus_8_listener","_r5","_r1","ɵɵreference","select","NodeEmbedDialogComponent_mat_radio_group_13_Template","ɵɵproperty","ɵɵsanitizeHtml","ɵɵpipeBind2","SharedModule","NodeEmbedDialogModule","_3","declarations","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}