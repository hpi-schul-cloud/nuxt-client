{"version":3,"file":"src_app_features_dialogs_dialog-modules_pinned-collections-dialog_pinned-collections-dialog_m-faf6cd.js","mappings":"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","sources":["./src/app/features/dialogs/dialog-modules/pinned-collections-dialog/pinned-collections-dialog-data.ts","./src/app/features/dialogs/dialog-modules/pinned-collections-dialog/pinned-collections-dialog.component.ts","./src/app/features/dialogs/dialog-modules/pinned-collections-dialog/pinned-collections-dialog.component.html","./src/app/features/dialogs/dialog-modules/pinned-collections-dialog/pinned-collections-dialog.module.ts"],"sourcesContent":["import { Node } from '../../../../core-module/core.module';\n\nexport class PinnedCollectionsDialogData {\n    collection: Node;\n}\n\nexport type PinnedCollectionsDialogResult = void;\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { Component, Inject } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    DialogButton,\n    Node,\n    NodeList,\n    NodeWrapper,\n    RestCollectionService,\n    RestConstants,\n    RestHelper,\n    RestNodeService,\n    RestSearchService,\n} from '../../../../core-module/core.module';\nimport { Helper } from '../../../../core-module/rest/helper';\nimport { Toast } from '../../../../services/toast';\nimport { CARD_DIALOG_DATA, Closable } from '../../card-dialog/card-dialog-config';\nimport { CardDialogRef } from '../../card-dialog/card-dialog-ref';\nimport {\n    PinnedCollectionsDialogData,\n    PinnedCollectionsDialogResult,\n} from './pinned-collections-dialog-data';\n\n@Component({\n    selector: 'es-pinned-collections-dialog',\n    templateUrl: './pinned-collections-dialog.component.html',\n    styleUrls: ['./pinned-collections-dialog.component.scss'],\n})\nexport class PinnedCollectionsDialogComponent {\n    pinnedCollections: Node[];\n    checked: string[] = [];\n\n    constructor(\n        @Inject(CARD_DIALOG_DATA) public data: PinnedCollectionsDialogData,\n        private dialogRef: CardDialogRef<\n            PinnedCollectionsDialogData,\n            PinnedCollectionsDialogResult\n        >,\n        private collection: RestCollectionService,\n        private node: RestNodeService,\n        private search: RestSearchService,\n        private toast: Toast,\n        private translate: TranslateService,\n    ) {\n        this.init();\n        this.initButtons();\n    }\n\n    private close(): void {\n        this.dialogRef.close(null);\n    }\n\n    private init(): void {\n        this.dialogRef.patchState({ isLoading: true });\n        this.search\n            .searchByProperties(\n                [RestConstants.CCM_PROP_COLLECTION_PINNED_STATUS],\n                ['true'],\n                ['='],\n                RestConstants.COMBINE_MODE_AND,\n                RestConstants.CONTENT_TYPE_COLLECTIONS,\n                {\n                    sortBy: [RestConstants.CCM_PROP_COLLECTION_PINNED_ORDER],\n                    sortAscending: true,\n                    count: RestConstants.COUNT_UNLIMITED,\n                },\n            )\n            .subscribe((data: NodeList) => {\n                this.pinnedCollections = data.nodes;\n                this.updateSubtitle();\n                for (let collection of this.pinnedCollections) {\n                    // collection is already pinned, don't add it\n                    if (collection.ref.id === this.data.collection.ref.id) {\n                        this.setAllChecked();\n                        this.dialogRef.patchState({ isLoading: false });\n                        return;\n                    }\n                }\n                this.node\n                    .getNodeMetadata(this.data.collection.ref.id)\n                    .subscribe((add: NodeWrapper) => {\n                        this.pinnedCollections.splice(0, 0, add.node);\n                        this.updateSubtitle();\n                        this.dialogRef.patchState({ isLoading: false });\n                        this.setAllChecked();\n                    });\n            });\n    }\n\n    private initButtons(): void {\n        const buttons = [\n            new DialogButton('CANCEL', { color: 'standard' }, () => this.close()),\n            new DialogButton('APPLY', { color: 'primary' }, () => this.apply()),\n        ];\n        this.dialogRef.patchConfig({ buttons });\n    }\n\n    private updateSubtitle(): void {\n        this.translate\n            .get('CARD_SUBTITLE_MULTIPLE', { count: this.pinnedCollections.length })\n            .subscribe((subtitle) => this.dialogRef.patchConfig({ subtitle }));\n    }\n\n    isChecked(collection: Node) {\n        return this.checked.indexOf(collection.ref.id) != -1;\n    }\n\n    onDropped(event: CdkDragDrop<unknown>) {\n        Helper.arraySwap(this.pinnedCollections, event.previousIndex, event.currentIndex);\n        this.dialogRef.patchConfig({ closable: Closable.Confirm });\n    }\n\n    getName(collection: Node): string {\n        return RestHelper.getTitle(collection);\n    }\n\n    private apply() {\n        this.dialogRef.patchState({ isLoading: true });\n        let collections: string[] = [];\n        for (let collection of this.pinnedCollections) {\n            if (this.isChecked(collection)) {\n                collections.push(collection.ref.id);\n            }\n        }\n        this.collection.setPinning(collections).subscribe(\n            () => {\n                this.toast.toast('COLLECTIONS.PINNING.UPDATED');\n                this.close();\n            },\n            (error) => {\n                this.toast.error(error);\n                this.dialogRef.patchState({ isLoading: false });\n            },\n        );\n    }\n\n    setChecked(collection: Node, event: any) {\n        if (this.isChecked(collection)) {\n            this.checked.splice(this.checked.indexOf(collection.ref.id), 1);\n        } else {\n            this.checked.push(collection.ref.id);\n        }\n    }\n\n    private setAllChecked() {\n        for (let collection of this.pinnedCollections) {\n            this.checked.push(collection.ref.id);\n        }\n    }\n}\n","<ul cdkDropList (cdkDropListDropped)=\"onDropped($event)\">\n  <li *ngFor=\"let collection of pinnedCollections; index as index\" cdkDrag>\n    <mat-checkbox [checked]=\"isChecked(collection)\" (change)=\"setChecked(collection, $event)\">\n      {{ getName(collection) }}\n    </mat-checkbox>\n    <i esIcon=\"drag_handle\" class=\"drag-handle\" cdkDragHandle></i>\n  </li>\n</ul>\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../../../shared/shared.module';\nimport { PinnedCollectionsDialogComponent } from './pinned-collections-dialog.component';\n\nexport { PinnedCollectionsDialogComponent };\n\n@NgModule({\n    declarations: [PinnedCollectionsDialogComponent],\n    imports: [SharedModule],\n})\nexport class PinnedCollectionsDialogModule {}\n"],"names":["PinnedCollectionsDialogData","DialogButton","RestConstants","RestHelper","Helper","CARD_DIALOG_DATA","Closable","i0","ɵɵelementStart","ɵɵlistener","PinnedCollectionsDialogComponent_li_1_Template_mat_checkbox_change_1_listener","$event","restoredCtx","ɵɵrestoreView","_r4","collection_r1","$implicit","ctx_r3","ɵɵnextContext","ɵɵresetView","setChecked","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","ctx_r0","isChecked","ɵɵtextInterpolate1","getName","PinnedCollectionsDialogComponent","constructor","data","dialogRef","collection","node","search","toast","translate","checked","init","initButtons","close","patchState","isLoading","searchByProperties","CCM_PROP_COLLECTION_PINNED_STATUS","COMBINE_MODE_AND","CONTENT_TYPE_COLLECTIONS","sortBy","CCM_PROP_COLLECTION_PINNED_ORDER","sortAscending","count","COUNT_UNLIMITED","subscribe","pinnedCollections","nodes","updateSubtitle","ref","id","setAllChecked","getNodeMetadata","add","splice","buttons","color","apply","patchConfig","get","length","subtitle","indexOf","onDropped","event","arraySwap","previousIndex","currentIndex","closable","Confirm","getTitle","collections","push","setPinning","error","_","ɵɵdirectiveInject","i1","CardDialogRef","i2","RestCollectionService","RestNodeService","RestSearchService","i3","Toast","i4","TranslateService","_2","selectors","decls","vars","consts","template","PinnedCollectionsDialogComponent_Template","rf","ctx","PinnedCollectionsDialogComponent_Template_ul_cdkDropListDropped_0_listener","ɵɵtemplate","PinnedCollectionsDialogComponent_li_1_Template","SharedModule","PinnedCollectionsDialogModule","_3","declarations","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}