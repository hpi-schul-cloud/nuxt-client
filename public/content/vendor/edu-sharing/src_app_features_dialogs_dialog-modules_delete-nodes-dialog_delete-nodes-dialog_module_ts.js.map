{"version":3,"file":"src_app_features_dialogs_dialog-modules_delete-nodes-dialog_delete-nodes-dialog_module_ts.js","mappings":"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","sources":["./src/app/features/dialogs/dialog-modules/delete-nodes-dialog/delete-nodes-dialog.component.ts","./src/app/features/dialogs/dialog-modules/delete-nodes-dialog/delete-nodes-dialog.component.html","./src/app/features/dialogs/dialog-modules/delete-nodes-dialog/delete-nodes-dialog.module.ts"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { NodePermissions, NodeService } from 'ngx-edu-sharing-api';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n    DialogButton,\n    Node,\n    RestConnectorService,\n    RestConstants,\n    RestHelper,\n    RestUsageService,\n    TemporaryStorageService,\n} from '../../../../core-module/core.module';\nimport { NodeHelperService } from '../../../../services/node-helper.service';\nimport { Toast } from '../../../../services/toast';\nimport { ClipboardObject, LocalEventsService } from 'ngx-edu-sharing-ui';\nimport { forkJoinWithErrors } from '../../../../util/rxjs/forkJoinWithErrors';\nimport { CARD_DIALOG_DATA } from '../../card-dialog/card-dialog-config';\nimport { CardDialogRef } from '../../card-dialog/card-dialog-ref';\nimport { DeleteNodesDialogData, DeleteNodesDialogResult } from './delete-nodes-dialog-data';\n\n@Component({\n    selector: 'es-delete-nodes-dialog',\n    templateUrl: './delete-nodes-dialog.component.html',\n    styleUrls: ['./delete-nodes-dialog.component.scss'],\n})\nexport class DeleteNodesDialogComponent implements OnInit {\n    /** Message shown to the user in the dialog body. */\n    message: string;\n    /** Translation parameters for the message. */\n    messageParams: { [key: string]: string };\n    /** Whether the user is given the option to block further imports. */\n    canBlockImport: boolean;\n    /** Whether the user selected to block further imports. */\n    shouldBlockImport: boolean;\n\n    constructor(\n        @Inject(CARD_DIALOG_DATA) public data: DeleteNodesDialogData,\n        private dialogRef: CardDialogRef<DeleteNodesDialogData, DeleteNodesDialogResult>,\n        private connector: RestConnectorService,\n        private localEvents: LocalEventsService,\n        private nodeHelper: NodeHelperService,\n        private nodeService: NodeService,\n        private temporaryStorage: TemporaryStorageService,\n        private toast: Toast,\n        private usageService: RestUsageService,\n    ) {\n        this.dialogRef.patchState({ isLoading: true });\n    }\n\n    ngOnInit(): void {\n        this.updateTitleAndMessage();\n        this.canBlockImport = this.getCanBlockImports();\n        this.shouldBlockImport = this.canBlockImport;\n        this.dialogRef.patchConfig({\n            buttons: [\n                new DialogButton('CANCEL', { color: 'standard' }, () => this.dialogRef.close()),\n                new DialogButton('YES_DELETE', { color: 'danger' }, () => this.onConfirm()),\n            ],\n        });\n    }\n\n    /**\n     * Updates the dialog title and sets `message` and `messageParams`.\n     *\n     * Sets the dialog's `isLoading` state to `false` when done.\n     */\n    private updateTitleAndMessage(): void {\n        let waitingForResponse = false;\n        let title: string;\n        title = 'WORKSPACE.DELETE_TITLE' + (this.data.nodes.length === 1 ? '_SINGLE' : '');\n        this.message = 'WORKSPACE.DELETE_MESSAGE' + (this.data.nodes.length === 1 ? '_SINGLE' : '');\n        if (this.data.nodes.length === 1) {\n            const node = this.data.nodes[0];\n            const name = RestHelper.getName(node);\n            this.messageParams = { name };\n            if (node.collection) {\n                title = 'WORKSPACE.DELETE_TITLE_COLLECTION';\n                this.message = 'WORKSPACE.DELETE_MESSAGE_COLLECTION';\n            } else if (this.nodeHelper.isNodePublishedCopy(node)) {\n                title = 'WORKSPACE.DELETE_TITLE_PUBLISHED_COPY';\n                this.message = 'WORKSPACE.DELETE_MESSAGE_PUBLISHED_COPY';\n            } else if (node.mediatype === 'folder-link') {\n                title = 'WORKSPACE.DELETE_TITLE_FOLDER_LINK';\n                this.message = 'WORKSPACE.DELETE_MESSAGE_FOLDER_LINK';\n            } else if (node.isDirectory) {\n                // Check for usages and warn user\n                waitingForResponse = true;\n                this.usageService\n                    .getNodeUsages(node.ref.id, node.ref.repo)\n                    .subscribe(({ usages }) => {\n                        if (usages.length > 0) {\n                            this.message = 'WORKSPACE.DELETE_MESSAGE_SINGLE_USAGES';\n                            this.messageParams = { name, usages: usages.length.toString() };\n                        }\n                        this.dialogRef.patchState({ isLoading: false });\n                    });\n            }\n        }\n        this.dialogRef.patchConfig({ title });\n        if (!waitingForResponse) {\n            setTimeout(() => {\n                this.dialogRef.patchState({ isLoading: false });\n            });\n        }\n    }\n\n    private getCanBlockImports(): boolean {\n        return (\n            this.connector.getCurrentLogin()?.isAdmin &&\n            this.data.nodes.every(\n                (n) => n.properties[RestConstants.CCM_PROP_REPLICATIONSOURCE] != null,\n            )\n        );\n    }\n\n    private onConfirm(): void {\n        this.dialogRef.patchState({ isLoading: true });\n        forkJoinWithErrors(this.data.nodes.map((node) => this.processNode(node))).subscribe(\n            ({ successes: processedNodes, errors }) => {\n                if (errors.length === 0) {\n                    this.toast.toast('WORKSPACE.TOAST.DELETE_FINISHED');\n                }\n                if (processedNodes.length > 0) {\n                    this.dialogRef.close({\n                        nodes: processedNodes,\n                        action: this.shouldBlockImport ? 'changed' : 'deleted',\n                    });\n                } else {\n                    this.dialogRef.close(null);\n                }\n                // If subscribers to the emitted events cause routing actions, the dialog could\n                // interfere if still open. So we emit the events after closing the dialog.\n                if (this.shouldBlockImport) {\n                    this.localEvents.nodesChanged.emit(processedNodes);\n                } else {\n                    this.localEvents.nodesDeleted.emit(processedNodes);\n                }\n            },\n        );\n    }\n\n    /**\n     * Processes a single node that was confirmed for deletion.\n     */\n    private processNode(node: Node): Observable<Node> {\n        let action: Observable<Node>;\n        if (this.shouldBlockImport) {\n            action = this.blockImport(node);\n        } else {\n            action = this.deleteNode(node);\n        }\n        return action.pipe(tap(() => this.removeNodeFromClipboard(node)));\n    }\n\n    private deleteNode(node: Node): Observable<Node> {\n        return this.nodeService.deleteNode(node.ref.id).pipe(map(() => node));\n    }\n\n    private blockImport(node: Node): Observable<Node> {\n        return this.nodeService\n            .editNodeMetadata(\n                node.ref.id,\n                { [RestConstants.CCM_PROP_IMPORT_BLOCKED]: ['true'] },\n                { versionComment: RestConstants.COMMENT_BLOCKED_IMPORT },\n            )\n            .pipe(\n                switchMap((node) => {\n                    const permissions: NodePermissions = { inherited: false, permissions: [] };\n                    return this.nodeService.setPermissions(node.ref.id, permissions);\n                }),\n                map(() => node),\n            );\n    }\n\n    private removeNodeFromClipboard(node: Node) {\n        let clip = this.temporaryStorage.get('workspace_clipboard') as ClipboardObject;\n        if (clip == null) {\n            return;\n        }\n        for (const clipNode of clip.nodes) {\n            if (clipNode.ref.id === node.ref.id) {\n                clip.nodes.splice(clip.nodes.indexOf(clipNode), 1);\n            }\n            if (clip.nodes.length === 0) {\n                this.temporaryStorage.remove('workspace_clipboard');\n            }\n        }\n    }\n}\n","{{ message | translate : messageParams }}\n<div *ngIf=\"canBlockImport\" class=\"block-import-checkbox\">\n  <mat-checkbox [(ngModel)]=\"shouldBlockImport\">\n    <es-multi-line-label>\n      <ng-container slot=\"label\">\n        {{ 'WORKSPACE.DELETE_IMPORT_BLOCK' | translate }}\n      </ng-container>\n      <ng-container slot=\"description\">\n        {{ 'WORKSPACE.DELETE_IMPORT_BLOCK_INFO' | translate }}\n      </ng-container>\n    </es-multi-line-label>\n  </mat-checkbox>\n</div>\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../../../shared/shared.module';\nimport { DeleteNodesDialogComponent } from './delete-nodes-dialog.component';\n\nexport { DeleteNodesDialogComponent };\n\n@NgModule({\n    declarations: [DeleteNodesDialogComponent],\n    imports: [SharedModule],\n})\nexport class DeleteNodesDialogModule {}\n"],"names":["map","switchMap","tap","DialogButton","RestConstants","RestHelper","forkJoinWithErrors","CARD_DIALOG_DATA","i0","ɵɵelementStart","ɵɵlistener","DeleteNodesDialogComponent_div_2_Template_mat_checkbox_ngModelChange_1_listener","$event","ɵɵrestoreView","_r2","ctx_r1","ɵɵnextContext","ɵɵresetView","shouldBlockImport","ɵɵelementContainerStart","ɵɵtext","ɵɵelementContainerEnd","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ctx_r0","ɵɵtextInterpolate1","ɵɵpipeBind1","DeleteNodesDialogComponent","constructor","data","dialogRef","connector","localEvents","nodeHelper","nodeService","temporaryStorage","toast","usageService","patchState","isLoading","ngOnInit","updateTitleAndMessage","canBlockImport","getCanBlockImports","patchConfig","buttons","color","close","onConfirm","waitingForResponse","title","nodes","length","message","node","name","getName","messageParams","collection","isNodePublishedCopy","mediatype","isDirectory","getNodeUsages","ref","id","repo","subscribe","usages","toString","setTimeout","getCurrentLogin","isAdmin","every","n","properties","CCM_PROP_REPLICATIONSOURCE","processNode","successes","processedNodes","errors","action","nodesChanged","emit","nodesDeleted","blockImport","deleteNode","pipe","removeNodeFromClipboard","editNodeMetadata","CCM_PROP_IMPORT_BLOCKED","versionComment","COMMENT_BLOCKED_IMPORT","permissions","inherited","setPermissions","clip","get","clipNode","splice","indexOf","remove","_","ɵɵdirectiveInject","i1","CardDialogRef","i2","RestConnectorService","i3","LocalEventsService","i4","NodeHelperService","i5","NodeService","TemporaryStorageService","i6","Toast","RestUsageService","_2","selectors","decls","vars","consts","template","DeleteNodesDialogComponent_Template","rf","ctx","ɵɵtemplate","DeleteNodesDialogComponent_div_2_Template","ɵɵpipeBind2","SharedModule","DeleteNodesDialogModule","_3","declarations","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}