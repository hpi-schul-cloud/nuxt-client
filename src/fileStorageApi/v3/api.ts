/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface FileRecordResponse
 */
export interface FileRecordResponse {
    /**
     * 
     * @type {string}
     * @memberof FileRecordResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FileRecordResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof FileRecordResponse
     */
    parentId: string;
    /**
     * 
     * @type {string}
     * @memberof FileRecordResponse
     */
    creatorId: string;
    /**
     * 
     * @type {string}
     * @memberof FileRecordResponse
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof FileRecordResponse
     */
    parentType: FileRecordResponseParentTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FileRecordResponseParentTypeEnum {
    Users = 'users',
    Schools = 'schools',
    Courses = 'courses',
    Teams = 'teams',
    Dashboard = 'dashboard',
    Tasks = 'tasks'
}

/**
 * 
 * @export
 * @interface ResolvedUser
 */
export interface ResolvedUser {
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    updatedAt: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ResolvedUser
     */
    roles: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResolvedUser
     */
    permissions: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    schoolId: string;
}

/**
 * FilesStorageApi - axios parameter creator
 * @export
 */
export const FilesStorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesStorageControllerDownload: async (fileRecordId: string, fileName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('filesStorageControllerDownload', 'fileRecordId', fileRecordId)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('filesStorageControllerDownload', 'fileName', fileName)
            const localVarPath = `/files-storage/download/{fileRecordId}/{fileName}`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {'users' | 'schools' | 'courses' | 'teams' | 'dashboard' | 'tasks'} parentType 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesStorageControllerUploadAsStream: async (schoolId: string, parentId: string, parentType: 'users' | 'schools' | 'courses' | 'teams' | 'dashboard' | 'tasks', file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('filesStorageControllerUploadAsStream', 'schoolId', schoolId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('filesStorageControllerUploadAsStream', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('filesStorageControllerUploadAsStream', 'parentType', parentType)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('filesStorageControllerUploadAsStream', 'file', file)
            const localVarPath = `/files-storage/upload/{schoolId}/{parentType}/{parentId}`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)))
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)))
                .replace(`{${"parentType"}}`, encodeURIComponent(String(parentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesStorageApi - functional programming interface
 * @export
 */
export const FilesStorageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesStorageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesStorageControllerDownload(fileRecordId: string, fileName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesStorageControllerDownload(fileRecordId, fileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {'users' | 'schools' | 'courses' | 'teams' | 'dashboard' | 'tasks'} parentType 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesStorageControllerUploadAsStream(schoolId: string, parentId: string, parentType: 'users' | 'schools' | 'courses' | 'teams' | 'dashboard' | 'tasks', file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesStorageControllerUploadAsStream(schoolId, parentId, parentType, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesStorageApi - factory interface
 * @export
 */
export const FilesStorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesStorageApiFp(configuration)
    return {
        /**
         * 
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesStorageControllerDownload(fileRecordId: string, fileName: string, options?: any): AxiosPromise<void> {
            return localVarFp.filesStorageControllerDownload(fileRecordId, fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {'users' | 'schools' | 'courses' | 'teams' | 'dashboard' | 'tasks'} parentType 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesStorageControllerUploadAsStream(schoolId: string, parentId: string, parentType: 'users' | 'schools' | 'courses' | 'teams' | 'dashboard' | 'tasks', file: any, options?: any): AxiosPromise<FileRecordResponse> {
            return localVarFp.filesStorageControllerUploadAsStream(schoolId, parentId, parentType, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesStorageApi - interface
 * @export
 * @interface FilesStorageApi
 */
export interface FilesStorageApiInterface {
    /**
     * 
     * @param {string} fileRecordId 
     * @param {string} fileName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesStorageApiInterface
     */
    filesStorageControllerDownload(fileRecordId: string, fileName: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {'users' | 'schools' | 'courses' | 'teams' | 'dashboard' | 'tasks'} parentType 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesStorageApiInterface
     */
    filesStorageControllerUploadAsStream(schoolId: string, parentId: string, parentType: 'users' | 'schools' | 'courses' | 'teams' | 'dashboard' | 'tasks', file: any, options?: any): AxiosPromise<FileRecordResponse>;

}

/**
 * FilesStorageApi - object-oriented interface
 * @export
 * @class FilesStorageApi
 * @extends {BaseAPI}
 */
export class FilesStorageApi extends BaseAPI implements FilesStorageApiInterface {
    /**
     * 
     * @param {string} fileRecordId 
     * @param {string} fileName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesStorageApi
     */
    public filesStorageControllerDownload(fileRecordId: string, fileName: string, options?: any) {
        return FilesStorageApiFp(this.configuration).filesStorageControllerDownload(fileRecordId, fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {'users' | 'schools' | 'courses' | 'teams' | 'dashboard' | 'tasks'} parentType 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesStorageApi
     */
    public filesStorageControllerUploadAsStream(schoolId: string, parentId: string, parentType: 'users' | 'schools' | 'courses' | 'teams' | 'dashboard' | 'tasks', file: any, options?: any) {
        return FilesStorageApiFp(this.configuration).filesStorageControllerUploadAsStream(schoolId, parentId, parentType, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolvedUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerMe(options?: any): AxiosPromise<ResolvedUser> {
            return localVarFp.userControllerMe(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerMe(options?: any): AxiosPromise<ResolvedUser>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerMe(options?: any) {
        return UserApiFp(this.configuration).userControllerMe(options).then((request) => request(this.axios, this.basePath));
    }
}


