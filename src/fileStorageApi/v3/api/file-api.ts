/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiValidationError } from '../models';
// @ts-ignore
import { CopyFileListResponse } from '../models';
// @ts-ignore
import { CopyFileParams } from '../models';
// @ts-ignore
import { CopyFilesOfParentParams } from '../models';
// @ts-ignore
import { FileRecordListResponse } from '../models';
// @ts-ignore
import { FileRecordParentType } from '../models';
// @ts-ignore
import { FileRecordResponse } from '../models';
// @ts-ignore
import { FileUrlParams } from '../models';
// @ts-ignore
import { PreviewHeight } from '../models';
// @ts-ignore
import { PreviewOutputMimeTypes } from '../models';
// @ts-ignore
import { PreviewWidth } from '../models';
// @ts-ignore
import { RenameFileParams } from '../models';
/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Copy all files of a parent entityId to a target entitId
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {CopyFilesOfParentParams} copyFilesOfParentParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copy: async (schoolId: string, parentId: string, parentType: FileRecordParentType, copyFilesOfParentParams: CopyFilesOfParentParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('copy', 'schoolId', schoolId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('copy', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('copy', 'parentType', parentType)
            // verify required parameter 'copyFilesOfParentParams' is not null or undefined
            assertParamExists('copy', 'copyFilesOfParentParams', copyFilesOfParentParams)
            const localVarPath = `/file/copy/{schoolId}/{parentType}/{parentId}`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)))
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)))
                .replace(`{${"parentType"}}`, encodeURIComponent(String(parentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(copyFilesOfParentParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Copy a single file in the same target entityId scope.
         * @param {string} fileRecordId 
         * @param {CopyFileParams} copyFileParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyFile: async (fileRecordId: string, copyFileParams: CopyFileParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('copyFile', 'fileRecordId', fileRecordId)
            // verify required parameter 'copyFileParams' is not null or undefined
            assertParamExists('copyFile', 'copyFileParams', copyFileParams)
            const localVarPath = `/file/copy/{fileRecordId}`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(copyFileParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark all files of a parent entityId for deletion. The files are permanently deleted after a certain time.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByParent: async (schoolId: string, parentId: string, parentType: FileRecordParentType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('deleteByParent', 'schoolId', schoolId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('deleteByParent', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('deleteByParent', 'parentType', parentType)
            const localVarPath = `/file/delete/{schoolId}/{parentType}/{parentId}`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)))
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)))
                .replace(`{${"parentType"}}`, encodeURIComponent(String(parentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark a single file for deletion. The files are permanently deleted after a certain time.
         * @param {string} fileRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (fileRecordId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('deleteFile', 'fileRecordId', fileRecordId)
            const localVarPath = `/file/delete/{fileRecordId}`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Streamable download of a binary file.
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {string} [range] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        download: async (fileRecordId: string, fileName: string, range?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('download', 'fileRecordId', fileRecordId)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('download', 'fileName', fileName)
            const localVarPath = `/file/download/{fileRecordId}/{fileName}`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Streamable download of a preview file.
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {PreviewOutputMimeTypes} [outputFormat] 
         * @param {PreviewWidth} [width] 
         * @param {PreviewHeight} [height] 
         * @param {boolean} [forceUpdate] If true, the preview will be generated again.
         * @param {string} [range] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPreview: async (fileRecordId: string, fileName: string, outputFormat?: PreviewOutputMimeTypes, width?: PreviewWidth, height?: PreviewHeight, forceUpdate?: boolean, range?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('downloadPreview', 'fileRecordId', fileRecordId)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('downloadPreview', 'fileName', fileName)
            const localVarPath = `/file/preview/{fileRecordId}/{fileName}`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (outputFormat !== undefined) {
                localVarQueryParameter['outputFormat'] = outputFormat;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (forceUpdate !== undefined) {
                localVarQueryParameter['forceUpdate'] = forceUpdate;
            }

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of file meta data of a parent entityId.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (schoolId: string, parentId: string, parentType: FileRecordParentType, skip?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('list', 'schoolId', schoolId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('list', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('list', 'parentType', parentType)
            const localVarPath = `/file/list/{schoolId}/{parentType}/{parentId}`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)))
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)))
                .replace(`{${"parentType"}}`, encodeURIComponent(String(parentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rename a single file.
         * @param {string} fileRecordId 
         * @param {RenameFileParams} renameFileParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFilename: async (fileRecordId: string, renameFileParams: RenameFileParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('patchFilename', 'fileRecordId', fileRecordId)
            // verify required parameter 'renameFileParams' is not null or undefined
            assertParamExists('patchFilename', 'renameFileParams', renameFileParams)
            const localVarPath = `/file/rename/{fileRecordId}`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(renameFileParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore all files of a parent entityId that are marked for deletion.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restore: async (schoolId: string, parentId: string, parentType: FileRecordParentType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('restore', 'schoolId', schoolId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('restore', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('restore', 'parentType', parentType)
            const localVarPath = `/file/restore/{schoolId}/{parentType}/{parentId}`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)))
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)))
                .replace(`{${"parentType"}}`, encodeURIComponent(String(parentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore a single file that is marked for deletion.
         * @param {string} fileRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreFile: async (fileRecordId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('restoreFile', 'fileRecordId', fileRecordId)
            const localVarPath = `/file/restore/{fileRecordId}`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Streamable upload of a binary file.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload: async (schoolId: string, parentId: string, parentType: FileRecordParentType, file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('upload', 'schoolId', schoolId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('upload', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('upload', 'parentType', parentType)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('upload', 'file', file)
            const localVarPath = `/file/upload/{schoolId}/{parentType}/{parentId}`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)))
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)))
                .replace(`{${"parentType"}}`, encodeURIComponent(String(parentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload file from url
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {FileUrlParams} fileUrlParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFromUrl: async (schoolId: string, parentId: string, parentType: FileRecordParentType, fileUrlParams: FileUrlParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('uploadFromUrl', 'schoolId', schoolId)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('uploadFromUrl', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('uploadFromUrl', 'parentType', parentType)
            // verify required parameter 'fileUrlParams' is not null or undefined
            assertParamExists('uploadFromUrl', 'fileUrlParams', fileUrlParams)
            const localVarPath = `/file/upload-from-url/{schoolId}/{parentType}/{parentId}`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)))
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)))
                .replace(`{${"parentType"}}`, encodeURIComponent(String(parentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fileUrlParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Copy all files of a parent entityId to a target entitId
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {CopyFilesOfParentParams} copyFilesOfParentParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copy(schoolId: string, parentId: string, parentType: FileRecordParentType, copyFilesOfParentParams: CopyFilesOfParentParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CopyFileListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.copy(schoolId, parentId, parentType, copyFilesOfParentParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Copy a single file in the same target entityId scope.
         * @param {string} fileRecordId 
         * @param {CopyFileParams} copyFileParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copyFile(fileRecordId: string, copyFileParams: CopyFileParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.copyFile(fileRecordId, copyFileParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mark all files of a parent entityId for deletion. The files are permanently deleted after a certain time.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByParent(schoolId: string, parentId: string, parentType: FileRecordParentType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByParent(schoolId, parentId, parentType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mark a single file for deletion. The files are permanently deleted after a certain time.
         * @param {string} fileRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(fileRecordId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(fileRecordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Streamable download of a binary file.
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {string} [range] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async download(fileRecordId: string, fileName: string, range?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.download(fileRecordId, fileName, range, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Streamable download of a preview file.
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {PreviewOutputMimeTypes} [outputFormat] 
         * @param {PreviewWidth} [width] 
         * @param {PreviewHeight} [height] 
         * @param {boolean} [forceUpdate] If true, the preview will be generated again.
         * @param {string} [range] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadPreview(fileRecordId: string, fileName: string, outputFormat?: PreviewOutputMimeTypes, width?: PreviewWidth, height?: PreviewHeight, forceUpdate?: boolean, range?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadPreview(fileRecordId, fileName, outputFormat, width, height, forceUpdate, range, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of file meta data of a parent entityId.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(schoolId: string, parentId: string, parentType: FileRecordParentType, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(schoolId, parentId, parentType, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rename a single file.
         * @param {string} fileRecordId 
         * @param {RenameFileParams} renameFileParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFilename(fileRecordId: string, renameFileParams: RenameFileParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchFilename(fileRecordId, renameFileParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Restore all files of a parent entityId that are marked for deletion.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restore(schoolId: string, parentId: string, parentType: FileRecordParentType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restore(schoolId, parentId, parentType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Restore a single file that is marked for deletion.
         * @param {string} fileRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restoreFile(fileRecordId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restoreFile(fileRecordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Streamable upload of a binary file.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upload(schoolId: string, parentId: string, parentType: FileRecordParentType, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upload(schoolId, parentId, parentType, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload file from url
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {FileUrlParams} fileUrlParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFromUrl(schoolId: string, parentId: string, parentType: FileRecordParentType, fileUrlParams: FileUrlParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFromUrl(schoolId, parentId, parentType, fileUrlParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileApiFp(configuration)
    return {
        /**
         * 
         * @summary Copy all files of a parent entityId to a target entitId
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {CopyFilesOfParentParams} copyFilesOfParentParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copy(schoolId: string, parentId: string, parentType: FileRecordParentType, copyFilesOfParentParams: CopyFilesOfParentParams, options?: any): AxiosPromise<CopyFileListResponse> {
            return localVarFp.copy(schoolId, parentId, parentType, copyFilesOfParentParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Copy a single file in the same target entityId scope.
         * @param {string} fileRecordId 
         * @param {CopyFileParams} copyFileParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyFile(fileRecordId: string, copyFileParams: CopyFileParams, options?: any): AxiosPromise<FileRecordResponse> {
            return localVarFp.copyFile(fileRecordId, copyFileParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark all files of a parent entityId for deletion. The files are permanently deleted after a certain time.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByParent(schoolId: string, parentId: string, parentType: FileRecordParentType, options?: any): AxiosPromise<FileRecordListResponse> {
            return localVarFp.deleteByParent(schoolId, parentId, parentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark a single file for deletion. The files are permanently deleted after a certain time.
         * @param {string} fileRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(fileRecordId: string, options?: any): AxiosPromise<FileRecordResponse> {
            return localVarFp.deleteFile(fileRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Streamable download of a binary file.
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {string} [range] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        download(fileRecordId: string, fileName: string, range?: string, options?: any): AxiosPromise<object> {
            return localVarFp.download(fileRecordId, fileName, range, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Streamable download of a preview file.
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {PreviewOutputMimeTypes} [outputFormat] 
         * @param {PreviewWidth} [width] 
         * @param {PreviewHeight} [height] 
         * @param {boolean} [forceUpdate] If true, the preview will be generated again.
         * @param {string} [range] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPreview(fileRecordId: string, fileName: string, outputFormat?: PreviewOutputMimeTypes, width?: PreviewWidth, height?: PreviewHeight, forceUpdate?: boolean, range?: string, options?: any): AxiosPromise<object> {
            return localVarFp.downloadPreview(fileRecordId, fileName, outputFormat, width, height, forceUpdate, range, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of file meta data of a parent entityId.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(schoolId: string, parentId: string, parentType: FileRecordParentType, skip?: number, limit?: number, options?: any): AxiosPromise<FileRecordListResponse> {
            return localVarFp.list(schoolId, parentId, parentType, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rename a single file.
         * @param {string} fileRecordId 
         * @param {RenameFileParams} renameFileParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFilename(fileRecordId: string, renameFileParams: RenameFileParams, options?: any): AxiosPromise<FileRecordResponse> {
            return localVarFp.patchFilename(fileRecordId, renameFileParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore all files of a parent entityId that are marked for deletion.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restore(schoolId: string, parentId: string, parentType: FileRecordParentType, options?: any): AxiosPromise<FileRecordListResponse> {
            return localVarFp.restore(schoolId, parentId, parentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore a single file that is marked for deletion.
         * @param {string} fileRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreFile(fileRecordId: string, options?: any): AxiosPromise<FileRecordResponse> {
            return localVarFp.restoreFile(fileRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Streamable upload of a binary file.
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload(schoolId: string, parentId: string, parentType: FileRecordParentType, file: any, options?: any): AxiosPromise<FileRecordResponse> {
            return localVarFp.upload(schoolId, parentId, parentType, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload file from url
         * @param {string} schoolId 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {FileUrlParams} fileUrlParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFromUrl(schoolId: string, parentId: string, parentType: FileRecordParentType, fileUrlParams: FileUrlParams, options?: any): AxiosPromise<FileRecordResponse> {
            return localVarFp.uploadFromUrl(schoolId, parentId, parentType, fileUrlParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileApi - interface
 * @export
 * @interface FileApi
 */
export interface FileApiInterface {
    /**
     * 
     * @summary Copy all files of a parent entityId to a target entitId
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {CopyFilesOfParentParams} copyFilesOfParentParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    copy(schoolId: string, parentId: string, parentType: FileRecordParentType, copyFilesOfParentParams: CopyFilesOfParentParams, options?: any): AxiosPromise<CopyFileListResponse>;

    /**
     * 
     * @summary Copy a single file in the same target entityId scope.
     * @param {string} fileRecordId 
     * @param {CopyFileParams} copyFileParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    copyFile(fileRecordId: string, copyFileParams: CopyFileParams, options?: any): AxiosPromise<FileRecordResponse>;

    /**
     * 
     * @summary Mark all files of a parent entityId for deletion. The files are permanently deleted after a certain time.
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    deleteByParent(schoolId: string, parentId: string, parentType: FileRecordParentType, options?: any): AxiosPromise<FileRecordListResponse>;

    /**
     * 
     * @summary Mark a single file for deletion. The files are permanently deleted after a certain time.
     * @param {string} fileRecordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    deleteFile(fileRecordId: string, options?: any): AxiosPromise<FileRecordResponse>;

    /**
     * 
     * @summary Streamable download of a binary file.
     * @param {string} fileRecordId 
     * @param {string} fileName 
     * @param {string} [range] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    download(fileRecordId: string, fileName: string, range?: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @summary Streamable download of a preview file.
     * @param {string} fileRecordId 
     * @param {string} fileName 
     * @param {PreviewOutputMimeTypes} [outputFormat] 
     * @param {PreviewWidth} [width] 
     * @param {PreviewHeight} [height] 
     * @param {boolean} [forceUpdate] If true, the preview will be generated again.
     * @param {string} [range] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    downloadPreview(fileRecordId: string, fileName: string, outputFormat?: PreviewOutputMimeTypes, width?: PreviewWidth, height?: PreviewHeight, forceUpdate?: boolean, range?: string, options?: any): AxiosPromise<object>;

    /**
     * 
     * @summary Get a list of file meta data of a parent entityId.
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    list(schoolId: string, parentId: string, parentType: FileRecordParentType, skip?: number, limit?: number, options?: any): AxiosPromise<FileRecordListResponse>;

    /**
     * 
     * @summary Rename a single file.
     * @param {string} fileRecordId 
     * @param {RenameFileParams} renameFileParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    patchFilename(fileRecordId: string, renameFileParams: RenameFileParams, options?: any): AxiosPromise<FileRecordResponse>;

    /**
     * 
     * @summary Restore all files of a parent entityId that are marked for deletion.
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    restore(schoolId: string, parentId: string, parentType: FileRecordParentType, options?: any): AxiosPromise<FileRecordListResponse>;

    /**
     * 
     * @summary Restore a single file that is marked for deletion.
     * @param {string} fileRecordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    restoreFile(fileRecordId: string, options?: any): AxiosPromise<FileRecordResponse>;

    /**
     * 
     * @summary Streamable upload of a binary file.
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    upload(schoolId: string, parentId: string, parentType: FileRecordParentType, file: any, options?: any): AxiosPromise<FileRecordResponse>;

    /**
     * 
     * @summary Upload file from url
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {FileUrlParams} fileUrlParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    uploadFromUrl(schoolId: string, parentId: string, parentType: FileRecordParentType, fileUrlParams: FileUrlParams, options?: any): AxiosPromise<FileRecordResponse>;

}

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI implements FileApiInterface {
    /**
     * 
     * @summary Copy all files of a parent entityId to a target entitId
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {CopyFilesOfParentParams} copyFilesOfParentParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public copy(schoolId: string, parentId: string, parentType: FileRecordParentType, copyFilesOfParentParams: CopyFilesOfParentParams, options?: any) {
        return FileApiFp(this.configuration).copy(schoolId, parentId, parentType, copyFilesOfParentParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Copy a single file in the same target entityId scope.
     * @param {string} fileRecordId 
     * @param {CopyFileParams} copyFileParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public copyFile(fileRecordId: string, copyFileParams: CopyFileParams, options?: any) {
        return FileApiFp(this.configuration).copyFile(fileRecordId, copyFileParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark all files of a parent entityId for deletion. The files are permanently deleted after a certain time.
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public deleteByParent(schoolId: string, parentId: string, parentType: FileRecordParentType, options?: any) {
        return FileApiFp(this.configuration).deleteByParent(schoolId, parentId, parentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark a single file for deletion. The files are permanently deleted after a certain time.
     * @param {string} fileRecordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public deleteFile(fileRecordId: string, options?: any) {
        return FileApiFp(this.configuration).deleteFile(fileRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Streamable download of a binary file.
     * @param {string} fileRecordId 
     * @param {string} fileName 
     * @param {string} [range] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public download(fileRecordId: string, fileName: string, range?: string, options?: any) {
        return FileApiFp(this.configuration).download(fileRecordId, fileName, range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Streamable download of a preview file.
     * @param {string} fileRecordId 
     * @param {string} fileName 
     * @param {PreviewOutputMimeTypes} [outputFormat] 
     * @param {PreviewWidth} [width] 
     * @param {PreviewHeight} [height] 
     * @param {boolean} [forceUpdate] If true, the preview will be generated again.
     * @param {string} [range] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public downloadPreview(fileRecordId: string, fileName: string, outputFormat?: PreviewOutputMimeTypes, width?: PreviewWidth, height?: PreviewHeight, forceUpdate?: boolean, range?: string, options?: any) {
        return FileApiFp(this.configuration).downloadPreview(fileRecordId, fileName, outputFormat, width, height, forceUpdate, range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of file meta data of a parent entityId.
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public list(schoolId: string, parentId: string, parentType: FileRecordParentType, skip?: number, limit?: number, options?: any) {
        return FileApiFp(this.configuration).list(schoolId, parentId, parentType, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rename a single file.
     * @param {string} fileRecordId 
     * @param {RenameFileParams} renameFileParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public patchFilename(fileRecordId: string, renameFileParams: RenameFileParams, options?: any) {
        return FileApiFp(this.configuration).patchFilename(fileRecordId, renameFileParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore all files of a parent entityId that are marked for deletion.
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public restore(schoolId: string, parentId: string, parentType: FileRecordParentType, options?: any) {
        return FileApiFp(this.configuration).restore(schoolId, parentId, parentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore a single file that is marked for deletion.
     * @param {string} fileRecordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public restoreFile(fileRecordId: string, options?: any) {
        return FileApiFp(this.configuration).restoreFile(fileRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Streamable upload of a binary file.
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public upload(schoolId: string, parentId: string, parentType: FileRecordParentType, file: any, options?: any) {
        return FileApiFp(this.configuration).upload(schoolId, parentId, parentType, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload file from url
     * @param {string} schoolId 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {FileUrlParams} fileUrlParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public uploadFromUrl(schoolId: string, parentId: string, parentType: FileRecordParentType, fileUrlParams: FileUrlParams, options?: any) {
        return FileApiFp(this.configuration).uploadFromUrl(schoolId, parentId, parentType, fileUrlParams, options).then((request) => request(this.axios, this.basePath));
    }
}
