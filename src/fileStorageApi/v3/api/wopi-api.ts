/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software File Storage API
 * This is the API documentation for the Schulcloud-Verbund-Software File Storage API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiValidationError } from '../models';
// @ts-ignore
import { AuthorizedCollaboraDocumentUrlResponse } from '../models';
// @ts-ignore
import { EditorMode } from '../models';
// @ts-ignore
import { WopiFileInfoResponse } from '../models';
/**
 * WopiApi - axios parameter creator
 * @export
 */
export const WopiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary WOPI CheckFileInfo
         * @param {string} fileRecordId 
         * @param {string} accessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFileInfo: async (fileRecordId: string, accessToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('checkFileInfo', 'fileRecordId', fileRecordId)
            // verify required parameter 'accessToken' is not null or undefined
            assertParamExists('checkFileInfo', 'accessToken', accessToken)
            const localVarPath = `/wopi/files/{fileRecordId}`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Collabora access URL with permission check and access token creation
         * @param {string} fileRecordId 
         * @param {EditorMode} editorMode 
         * @param {string} userDisplayName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorizedCollaboraDocumentUrl: async (fileRecordId: string, editorMode: EditorMode, userDisplayName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('getAuthorizedCollaboraDocumentUrl', 'fileRecordId', fileRecordId)
            // verify required parameter 'editorMode' is not null or undefined
            assertParamExists('getAuthorizedCollaboraDocumentUrl', 'editorMode', editorMode)
            // verify required parameter 'userDisplayName' is not null or undefined
            assertParamExists('getAuthorizedCollaboraDocumentUrl', 'userDisplayName', userDisplayName)
            const localVarPath = `/wopi/authorized-collabora-document-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fileRecordId !== undefined) {
                localVarQueryParameter['fileRecordId'] = fileRecordId;
            }

            if (editorMode !== undefined) {
                localVarQueryParameter['editorMode'] = editorMode;
            }

            if (userDisplayName !== undefined) {
                localVarQueryParameter['userDisplayName'] = userDisplayName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary WOPI GetFile (download file contents)
         * @param {string} fileRecordId 
         * @param {string} accessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: async (fileRecordId: string, accessToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('getFile', 'fileRecordId', fileRecordId)
            // verify required parameter 'accessToken' is not null or undefined
            assertParamExists('getFile', 'accessToken', accessToken)
            const localVarPath = `/wopi/files/{fileRecordId}/contents`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary WOPI PutFile (update file contents)
         * @param {string} fileRecordId 
         * @param {string} accessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFile: async (fileRecordId: string, accessToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('putFile', 'fileRecordId', fileRecordId)
            // verify required parameter 'accessToken' is not null or undefined
            assertParamExists('putFile', 'accessToken', accessToken)
            const localVarPath = `/wopi/files/{fileRecordId}/contents`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WopiApi - functional programming interface
 * @export
 */
export const WopiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WopiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary WOPI CheckFileInfo
         * @param {string} fileRecordId 
         * @param {string} accessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkFileInfo(fileRecordId: string, accessToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WopiFileInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkFileInfo(fileRecordId, accessToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Collabora access URL with permission check and access token creation
         * @param {string} fileRecordId 
         * @param {EditorMode} editorMode 
         * @param {string} userDisplayName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorizedCollaboraDocumentUrl(fileRecordId: string, editorMode: EditorMode, userDisplayName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedCollaboraDocumentUrlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorizedCollaboraDocumentUrl(fileRecordId, editorMode, userDisplayName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary WOPI GetFile (download file contents)
         * @param {string} fileRecordId 
         * @param {string} accessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFile(fileRecordId: string, accessToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(fileRecordId, accessToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary WOPI PutFile (update file contents)
         * @param {string} fileRecordId 
         * @param {string} accessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFile(fileRecordId: string, accessToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putFile(fileRecordId, accessToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WopiApi - factory interface
 * @export
 */
export const WopiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WopiApiFp(configuration)
    return {
        /**
         * 
         * @summary WOPI CheckFileInfo
         * @param {string} fileRecordId 
         * @param {string} accessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFileInfo(fileRecordId: string, accessToken: string, options?: any): AxiosPromise<WopiFileInfoResponse> {
            return localVarFp.checkFileInfo(fileRecordId, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Collabora access URL with permission check and access token creation
         * @param {string} fileRecordId 
         * @param {EditorMode} editorMode 
         * @param {string} userDisplayName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorizedCollaboraDocumentUrl(fileRecordId: string, editorMode: EditorMode, userDisplayName: string, options?: any): AxiosPromise<AuthorizedCollaboraDocumentUrlResponse> {
            return localVarFp.getAuthorizedCollaboraDocumentUrl(fileRecordId, editorMode, userDisplayName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary WOPI GetFile (download file contents)
         * @param {string} fileRecordId 
         * @param {string} accessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile(fileRecordId: string, accessToken: string, options?: any): AxiosPromise<void> {
            return localVarFp.getFile(fileRecordId, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary WOPI PutFile (update file contents)
         * @param {string} fileRecordId 
         * @param {string} accessToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFile(fileRecordId: string, accessToken: string, options?: any): AxiosPromise<void> {
            return localVarFp.putFile(fileRecordId, accessToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WopiApi - interface
 * @export
 * @interface WopiApi
 */
export interface WopiApiInterface {
    /**
     * 
     * @summary WOPI CheckFileInfo
     * @param {string} fileRecordId 
     * @param {string} accessToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WopiApiInterface
     */
    checkFileInfo(fileRecordId: string, accessToken: string, options?: any): AxiosPromise<WopiFileInfoResponse>;

    /**
     * 
     * @summary Get Collabora access URL with permission check and access token creation
     * @param {string} fileRecordId 
     * @param {EditorMode} editorMode 
     * @param {string} userDisplayName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WopiApiInterface
     */
    getAuthorizedCollaboraDocumentUrl(fileRecordId: string, editorMode: EditorMode, userDisplayName: string, options?: any): AxiosPromise<AuthorizedCollaboraDocumentUrlResponse>;

    /**
     * 
     * @summary WOPI GetFile (download file contents)
     * @param {string} fileRecordId 
     * @param {string} accessToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WopiApiInterface
     */
    getFile(fileRecordId: string, accessToken: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary WOPI PutFile (update file contents)
     * @param {string} fileRecordId 
     * @param {string} accessToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WopiApiInterface
     */
    putFile(fileRecordId: string, accessToken: string, options?: any): AxiosPromise<void>;

}

/**
 * WopiApi - object-oriented interface
 * @export
 * @class WopiApi
 * @extends {BaseAPI}
 */
export class WopiApi extends BaseAPI implements WopiApiInterface {
    /**
     * 
     * @summary WOPI CheckFileInfo
     * @param {string} fileRecordId 
     * @param {string} accessToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WopiApi
     */
    public checkFileInfo(fileRecordId: string, accessToken: string, options?: any) {
        return WopiApiFp(this.configuration).checkFileInfo(fileRecordId, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Collabora access URL with permission check and access token creation
     * @param {string} fileRecordId 
     * @param {EditorMode} editorMode 
     * @param {string} userDisplayName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WopiApi
     */
    public getAuthorizedCollaboraDocumentUrl(fileRecordId: string, editorMode: EditorMode, userDisplayName: string, options?: any) {
        return WopiApiFp(this.configuration).getAuthorizedCollaboraDocumentUrl(fileRecordId, editorMode, userDisplayName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary WOPI GetFile (download file contents)
     * @param {string} fileRecordId 
     * @param {string} accessToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WopiApi
     */
    public getFile(fileRecordId: string, accessToken: string, options?: any) {
        return WopiApiFp(this.configuration).getFile(fileRecordId, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary WOPI PutFile (update file contents)
     * @param {string} fileRecordId 
     * @param {string} accessToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WopiApi
     */
    public putFile(fileRecordId: string, accessToken: string, options?: any) {
        return WopiApiFp(this.configuration).putFile(fileRecordId, accessToken, options).then((request) => request(this.axios, this.basePath));
    }
}
