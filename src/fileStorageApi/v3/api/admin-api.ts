/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiValidationError } from '../models';
// @ts-ignore
import { DeleteByStorageLocationResponse } from '../models';
// @ts-ignore
import { StorageLocation } from '../models';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Mark all files of a storage location entityId for deletion. The files are permanently deleted after a certain time.
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByStorageLocation: async (storageLocationId: string, storageLocation: StorageLocation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageLocationId' is not null or undefined
            assertParamExists('deleteByStorageLocation', 'storageLocationId', storageLocationId)
            // verify required parameter 'storageLocation' is not null or undefined
            assertParamExists('deleteByStorageLocation', 'storageLocation', storageLocation)
            const localVarPath = `/admin/file/storage-location/{storageLocation}/{storageLocationId}`
                .replace(`{${"storageLocationId"}}`, encodeURIComponent(String(storageLocationId)))
                .replace(`{${"storageLocation"}}`, encodeURIComponent(String(storageLocation)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Mark all files of a storage location entityId for deletion. The files are permanently deleted after a certain time.
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByStorageLocation(storageLocationId: string, storageLocation: StorageLocation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteByStorageLocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByStorageLocation(storageLocationId, storageLocation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @summary Mark all files of a storage location entityId for deletion. The files are permanently deleted after a certain time.
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByStorageLocation(storageLocationId: string, storageLocation: StorageLocation, options?: any): AxiosPromise<DeleteByStorageLocationResponse> {
            return localVarFp.deleteByStorageLocation(storageLocationId, storageLocation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - interface
 * @export
 * @interface AdminApi
 */
export interface AdminApiInterface {
    /**
     * 
     * @summary Mark all files of a storage location entityId for deletion. The files are permanently deleted after a certain time.
     * @param {string} storageLocationId 
     * @param {StorageLocation} storageLocation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    deleteByStorageLocation(storageLocationId: string, storageLocation: StorageLocation, options?: any): AxiosPromise<DeleteByStorageLocationResponse>;

}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI implements AdminApiInterface {
    /**
     * 
     * @summary Mark all files of a storage location entityId for deletion. The files are permanently deleted after a certain time.
     * @param {string} storageLocationId 
     * @param {StorageLocation} storageLocation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public deleteByStorageLocation(storageLocationId: string, storageLocation: StorageLocation, options?: any) {
        return AdminApiFp(this.configuration).deleteByStorageLocation(storageLocationId, storageLocation, options).then((request) => request(this.axios, this.basePath));
    }
}
