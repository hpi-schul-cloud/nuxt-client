/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';


/**
 * EduSharingApi - axios parameter creator
 * @export
 */
export const EduSharingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the required XML for registering the service against an edu-sharing repository.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEduAppXMLData: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/edu-sharing/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets detailed information about a ticket. Will throw an exception if the given ticket is not valid anymore.
         * @param {string} ticket The ticket to be evaluated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketAuthenticationInfo: async (ticket: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticket' is not null or undefined
            assertParamExists('getTicketAuthenticationInfo', 'ticket', ticket)
            const localVarPath = `/edu-sharing/validate/{ticket}`
                .replace(`{${"ticket"}}`, encodeURIComponent(String(ticket)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetches the edu-sharing ticket for a given user name.
         * @param {string} [userName] The name of the user the ticket shall be retrieved for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketForUser: async (userName?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/edu-sharing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EduSharingApi - functional programming interface
 * @export
 */
export const EduSharingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EduSharingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the required XML for registering the service against an edu-sharing repository.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEduAppXMLData(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEduAppXMLData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets detailed information about a ticket. Will throw an exception if the given ticket is not valid anymore.
         * @param {string} ticket The ticket to be evaluated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTicketAuthenticationInfo(ticket: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTicketAuthenticationInfo(ticket, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fetches the edu-sharing ticket for a given user name.
         * @param {string} [userName] The name of the user the ticket shall be retrieved for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTicketForUser(userName?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTicketForUser(userName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EduSharingApi - factory interface
 * @export
 */
export const EduSharingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EduSharingApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the required XML for registering the service against an edu-sharing repository.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEduAppXMLData(options?: any): AxiosPromise<string> {
            return localVarFp.getEduAppXMLData(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets detailed information about a ticket. Will throw an exception if the given ticket is not valid anymore.
         * @param {string} ticket The ticket to be evaluated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketAuthenticationInfo(ticket: string, options?: any): AxiosPromise<string> {
            return localVarFp.getTicketAuthenticationInfo(ticket, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetches the edu-sharing ticket for a given user name.
         * @param {string} [userName] The name of the user the ticket shall be retrieved for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketForUser(userName?: string, options?: any): AxiosPromise<string> {
            return localVarFp.getTicketForUser(userName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EduSharingApi - interface
 * @export
 * @interface EduSharingApi
 */
export interface EduSharingApiInterface {
    /**
     * 
     * @summary Returns the required XML for registering the service against an edu-sharing repository.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EduSharingApiInterface
     */
    getEduAppXMLData(options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary Gets detailed information about a ticket. Will throw an exception if the given ticket is not valid anymore.
     * @param {string} ticket The ticket to be evaluated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EduSharingApiInterface
     */
    getTicketAuthenticationInfo(ticket: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @summary Fetches the edu-sharing ticket for a given user name.
     * @param {string} [userName] The name of the user the ticket shall be retrieved for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EduSharingApiInterface
     */
    getTicketForUser(userName?: string, options?: any): AxiosPromise<string>;

}

/**
 * EduSharingApi - object-oriented interface
 * @export
 * @class EduSharingApi
 * @extends {BaseAPI}
 */
export class EduSharingApi extends BaseAPI implements EduSharingApiInterface {
    /**
     * 
     * @summary Returns the required XML for registering the service against an edu-sharing repository.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EduSharingApi
     */
    public getEduAppXMLData(options?: any) {
        return EduSharingApiFp(this.configuration).getEduAppXMLData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets detailed information about a ticket. Will throw an exception if the given ticket is not valid anymore.
     * @param {string} ticket The ticket to be evaluated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EduSharingApi
     */
    public getTicketAuthenticationInfo(ticket: string, options?: any) {
        return EduSharingApiFp(this.configuration).getTicketAuthenticationInfo(ticket, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetches the edu-sharing ticket for a given user name.
     * @param {string} [userName] The name of the user the ticket shall be retrieved for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EduSharingApi
     */
    public getTicketForUser(userName?: string, options?: any) {
        return EduSharingApiFp(this.configuration).getTicketForUser(userName, options).then((request) => request(this.axios, this.basePath));
    }
}


