/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiValidationError } from '../models';
// @ts-ignore
import { CopyApiResponse } from '../models';
// @ts-ignore
import { ShareTokenBodyParams } from '../models';
// @ts-ignore
import { ShareTokenImportBodyParams } from '../models';
// @ts-ignore
import { ShareTokenInfoResponse } from '../models';
// @ts-ignore
import { ShareTokenResponse } from '../models';
/**
 * ShareTokenApi - axios parameter creator
 * @export
 */
export const ShareTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a share token.
         * @param {ShareTokenBodyParams} shareTokenBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShareToken: async (shareTokenBodyParams: ShareTokenBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareTokenBodyParams' is not null or undefined
            assertParamExists('createShareToken', 'shareTokenBodyParams', shareTokenBodyParams)
            const localVarPath = `/sharetoken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareTokenBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import a share token payload.
         * @param {string} token The token that identifies the shared object
         * @param {ShareTokenImportBodyParams} shareTokenImportBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importShareToken: async (token: string, shareTokenImportBodyParams: ShareTokenImportBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('importShareToken', 'token', token)
            // verify required parameter 'shareTokenImportBodyParams' is not null or undefined
            assertParamExists('importShareToken', 'shareTokenImportBodyParams', shareTokenImportBodyParams)
            const localVarPath = `/sharetoken/{token}/import`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareTokenImportBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Look up a share token.
         * @param {string} token The token that identifies the shared object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupShareToken: async (token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('lookupShareToken', 'token', token)
            const localVarPath = `/sharetoken/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShareTokenApi - functional programming interface
 * @export
 */
export const ShareTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShareTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a share token.
         * @param {ShareTokenBodyParams} shareTokenBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShareToken(shareTokenBodyParams: ShareTokenBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShareToken(shareTokenBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Import a share token payload.
         * @param {string} token The token that identifies the shared object
         * @param {ShareTokenImportBodyParams} shareTokenImportBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importShareToken(token: string, shareTokenImportBodyParams: ShareTokenImportBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CopyApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importShareToken(token, shareTokenImportBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Look up a share token.
         * @param {string} token The token that identifies the shared object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lookupShareToken(token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareTokenInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupShareToken(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShareTokenApi - factory interface
 * @export
 */
export const ShareTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShareTokenApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a share token.
         * @param {ShareTokenBodyParams} shareTokenBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShareToken(shareTokenBodyParams: ShareTokenBodyParams, options?: any): AxiosPromise<ShareTokenResponse> {
            return localVarFp.createShareToken(shareTokenBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import a share token payload.
         * @param {string} token The token that identifies the shared object
         * @param {ShareTokenImportBodyParams} shareTokenImportBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importShareToken(token: string, shareTokenImportBodyParams: ShareTokenImportBodyParams, options?: any): AxiosPromise<CopyApiResponse> {
            return localVarFp.importShareToken(token, shareTokenImportBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Look up a share token.
         * @param {string} token The token that identifies the shared object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupShareToken(token: string, options?: any): AxiosPromise<ShareTokenInfoResponse> {
            return localVarFp.lookupShareToken(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShareTokenApi - interface
 * @export
 * @interface ShareTokenApi
 */
export interface ShareTokenApiInterface {
    /**
     * 
     * @summary Create a share token.
     * @param {ShareTokenBodyParams} shareTokenBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareTokenApiInterface
     */
    createShareToken(shareTokenBodyParams: ShareTokenBodyParams, options?: any): AxiosPromise<ShareTokenResponse>;

    /**
     * 
     * @summary Import a share token payload.
     * @param {string} token The token that identifies the shared object
     * @param {ShareTokenImportBodyParams} shareTokenImportBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareTokenApiInterface
     */
    importShareToken(token: string, shareTokenImportBodyParams: ShareTokenImportBodyParams, options?: any): AxiosPromise<CopyApiResponse>;

    /**
     * 
     * @summary Look up a share token.
     * @param {string} token The token that identifies the shared object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareTokenApiInterface
     */
    lookupShareToken(token: string, options?: any): AxiosPromise<ShareTokenInfoResponse>;

}

/**
 * ShareTokenApi - object-oriented interface
 * @export
 * @class ShareTokenApi
 * @extends {BaseAPI}
 */
export class ShareTokenApi extends BaseAPI implements ShareTokenApiInterface {
    /**
     * 
     * @summary Create a share token.
     * @param {ShareTokenBodyParams} shareTokenBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareTokenApi
     */
    public createShareToken(shareTokenBodyParams: ShareTokenBodyParams, options?: any) {
        return ShareTokenApiFp(this.configuration).createShareToken(shareTokenBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import a share token payload.
     * @param {string} token The token that identifies the shared object
     * @param {ShareTokenImportBodyParams} shareTokenImportBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareTokenApi
     */
    public importShareToken(token: string, shareTokenImportBodyParams: ShareTokenImportBodyParams, options?: any) {
        return ShareTokenApiFp(this.configuration).importShareToken(token, shareTokenImportBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Look up a share token.
     * @param {string} token The token that identifies the shared object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareTokenApi
     */
    public lookupShareToken(token: string, options?: any) {
        return ShareTokenApiFp(this.configuration).lookupShareToken(token, options).then((request) => request(this.axios, this.basePath));
    }
}
