/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateNewsParams } from '../models';
// @ts-ignore
import { NewsListResponse } from '../models';
// @ts-ignore
import { NewsResponse } from '../models';
// @ts-ignore
import { UpdateNewsParams } from '../models';
/**
 * NewsApi - axios parameter creator
 * @export
 */
export const NewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a news.
         * @param {string} newsId The id of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (newsId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'newsId' is not null or undefined
            assertParamExists('_delete', 'newsId', newsId)
            const localVarPath = `/news/{newsId}`
                .replace(`{${"newsId"}}`, encodeURIComponent(String(newsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a news by a user in a given scope (school or team).
         * @param {CreateNewsParams} createNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createNewsParams: CreateNewsParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createNewsParams' is not null or undefined
            assertParamExists('create', 'createNewsParams', createNewsParams)
            const localVarPath = `/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createNewsParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Responds with all news for a user.
         * @param {'schools' | 'courses' | 'teams'} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (targetModel?: 'schools' | 'courses' | 'teams', targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (targetModel !== undefined) {
                localVarQueryParameter['targetModel'] = targetModel;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['targetId'] = targetId;
            }

            if (unpublished !== undefined) {
                localVarQueryParameter['unpublished'] = unpublished;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Responds with news of a given team for a user.
         * @param {string} teamId The id of the team.
         * @param {'schools' | 'courses' | 'teams'} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllForTeam: async (teamId: string, targetModel?: 'schools' | 'courses' | 'teams', targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('findAllForTeam', 'teamId', teamId)
            const localVarPath = `/team/{teamId}/news`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (targetModel !== undefined) {
                localVarQueryParameter['targetModel'] = targetModel;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['targetId'] = targetId;
            }

            if (unpublished !== undefined) {
                localVarQueryParameter['unpublished'] = unpublished;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific news entry by id. A user may only read news of scopes he has the read permission. The news entity has school and user names populated.
         * @param {string} newsId The id of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne: async (newsId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'newsId' is not null or undefined
            assertParamExists('findOne', 'newsId', newsId)
            const localVarPath = `/news/{newsId}`
                .replace(`{${"newsId"}}`, encodeURIComponent(String(newsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update properties of a news.
         * @param {string} newsId The id of the news.
         * @param {UpdateNewsParams} updateNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (newsId: string, updateNewsParams: UpdateNewsParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'newsId' is not null or undefined
            assertParamExists('update', 'newsId', newsId)
            // verify required parameter 'updateNewsParams' is not null or undefined
            assertParamExists('update', 'updateNewsParams', updateNewsParams)
            const localVarPath = `/news/{newsId}`
                .replace(`{${"newsId"}}`, encodeURIComponent(String(newsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNewsParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsApi - functional programming interface
 * @export
 */
export const NewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a news.
         * @param {string} newsId The id of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(newsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(newsId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a news by a user in a given scope (school or team).
         * @param {CreateNewsParams} createNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createNewsParams: CreateNewsParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createNewsParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Responds with all news for a user.
         * @param {'schools' | 'courses' | 'teams'} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(targetModel?: 'schools' | 'courses' | 'teams', targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(targetModel, targetId, unpublished, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Responds with news of a given team for a user.
         * @param {string} teamId The id of the team.
         * @param {'schools' | 'courses' | 'teams'} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllForTeam(teamId: string, targetModel?: 'schools' | 'courses' | 'teams', targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllForTeam(teamId, targetModel, targetId, unpublished, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a specific news entry by id. A user may only read news of scopes he has the read permission. The news entity has school and user names populated.
         * @param {string} newsId The id of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOne(newsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOne(newsId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update properties of a news.
         * @param {string} newsId The id of the news.
         * @param {UpdateNewsParams} updateNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(newsId: string, updateNewsParams: UpdateNewsParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(newsId, updateNewsParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NewsApi - factory interface
 * @export
 */
export const NewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsApiFp(configuration)
    return {
        /**
         * Delete a news.
         * @param {string} newsId The id of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(newsId: string, options?: any): AxiosPromise<string> {
            return localVarFp._delete(newsId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a news by a user in a given scope (school or team).
         * @param {CreateNewsParams} createNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createNewsParams: CreateNewsParams, options?: any): AxiosPromise<NewsResponse> {
            return localVarFp.create(createNewsParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Responds with all news for a user.
         * @param {'schools' | 'courses' | 'teams'} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(targetModel?: 'schools' | 'courses' | 'teams', targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): AxiosPromise<NewsListResponse> {
            return localVarFp.findAll(targetModel, targetId, unpublished, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Responds with news of a given team for a user.
         * @param {string} teamId The id of the team.
         * @param {'schools' | 'courses' | 'teams'} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllForTeam(teamId: string, targetModel?: 'schools' | 'courses' | 'teams', targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): AxiosPromise<NewsListResponse> {
            return localVarFp.findAllForTeam(teamId, targetModel, targetId, unpublished, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific news entry by id. A user may only read news of scopes he has the read permission. The news entity has school and user names populated.
         * @param {string} newsId The id of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne(newsId: string, options?: any): AxiosPromise<NewsResponse> {
            return localVarFp.findOne(newsId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update properties of a news.
         * @param {string} newsId The id of the news.
         * @param {UpdateNewsParams} updateNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(newsId: string, updateNewsParams: UpdateNewsParams, options?: any): AxiosPromise<NewsResponse> {
            return localVarFp.update(newsId, updateNewsParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NewsApi - interface
 * @export
 * @interface NewsApi
 */
export interface NewsApiInterface {
    /**
     * Delete a news.
     * @param {string} newsId The id of the news.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    _delete(newsId: string, options?: any): AxiosPromise<string>;

    /**
     * Create a news by a user in a given scope (school or team).
     * @param {CreateNewsParams} createNewsParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    create(createNewsParams: CreateNewsParams, options?: any): AxiosPromise<NewsResponse>;

    /**
     * Responds with all news for a user.
     * @param {'schools' | 'courses' | 'teams'} [targetModel] Target model to which the news are related
     * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
     * @param {boolean} [unpublished] Flag that filters if the news should be published or not
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    findAll(targetModel?: 'schools' | 'courses' | 'teams', targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): AxiosPromise<NewsListResponse>;

    /**
     * Responds with news of a given team for a user.
     * @param {string} teamId The id of the team.
     * @param {'schools' | 'courses' | 'teams'} [targetModel] Target model to which the news are related
     * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
     * @param {boolean} [unpublished] Flag that filters if the news should be published or not
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    findAllForTeam(teamId: string, targetModel?: 'schools' | 'courses' | 'teams', targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): AxiosPromise<NewsListResponse>;

    /**
     * Retrieve a specific news entry by id. A user may only read news of scopes he has the read permission. The news entity has school and user names populated.
     * @param {string} newsId The id of the news.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    findOne(newsId: string, options?: any): AxiosPromise<NewsResponse>;

    /**
     * Update properties of a news.
     * @param {string} newsId The id of the news.
     * @param {UpdateNewsParams} updateNewsParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    update(newsId: string, updateNewsParams: UpdateNewsParams, options?: any): AxiosPromise<NewsResponse>;

}

/**
 * NewsApi - object-oriented interface
 * @export
 * @class NewsApi
 * @extends {BaseAPI}
 */
export class NewsApi extends BaseAPI implements NewsApiInterface {
    /**
     * Delete a news.
     * @param {string} newsId The id of the news.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public _delete(newsId: string, options?: any) {
        return NewsApiFp(this.configuration)._delete(newsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a news by a user in a given scope (school or team).
     * @param {CreateNewsParams} createNewsParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public create(createNewsParams: CreateNewsParams, options?: any) {
        return NewsApiFp(this.configuration).create(createNewsParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Responds with all news for a user.
     * @param {'schools' | 'courses' | 'teams'} [targetModel] Target model to which the news are related
     * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
     * @param {boolean} [unpublished] Flag that filters if the news should be published or not
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public findAll(targetModel?: 'schools' | 'courses' | 'teams', targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any) {
        return NewsApiFp(this.configuration).findAll(targetModel, targetId, unpublished, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Responds with news of a given team for a user.
     * @param {string} teamId The id of the team.
     * @param {'schools' | 'courses' | 'teams'} [targetModel] Target model to which the news are related
     * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
     * @param {boolean} [unpublished] Flag that filters if the news should be published or not
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public findAllForTeam(teamId: string, targetModel?: 'schools' | 'courses' | 'teams', targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any) {
        return NewsApiFp(this.configuration).findAllForTeam(teamId, targetModel, targetId, unpublished, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific news entry by id. A user may only read news of scopes he has the read permission. The news entity has school and user names populated.
     * @param {string} newsId The id of the news.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public findOne(newsId: string, options?: any) {
        return NewsApiFp(this.configuration).findOne(newsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update properties of a news.
     * @param {string} newsId The id of the news.
     * @param {UpdateNewsParams} updateNewsParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public update(newsId: string, updateNewsParams: UpdateNewsParams, options?: any) {
        return NewsApiFp(this.configuration).update(newsId, updateNewsParams, options).then((request) => request(this.axios, this.basePath));
    }
}
