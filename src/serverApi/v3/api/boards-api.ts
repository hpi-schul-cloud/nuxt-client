/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BoardResponse } from '../models';
// @ts-ignore
import { CardResponse } from '../models';
// @ts-ignore
import { ColumnResponse } from '../models';
// @ts-ignore
import { MoveCardBodyParams } from '../models';
// @ts-ignore
import { MoveColumnBodyParams } from '../models';
/**
 * BoardsApi - axios parameter creator
 * @export
 */
export const BoardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBoard: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/boards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCard: async (boardId: string, columnId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('createCard', 'boardId', boardId)
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('createCard', 'columnId', columnId)
            const localVarPath = `/boards/{boardId}/columns/{columnId}/cards`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createColumn: async (boardId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('createColumn', 'boardId', boardId)
            const localVarPath = `/boards/{boardId}/columns`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBoard: async (boardId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('deleteBoard', 'boardId', boardId)
            const localVarPath = `/boards/{boardId}`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {string} cardId The id of the card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCard: async (boardId: string, columnId: string, cardId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('deleteCard', 'boardId', boardId)
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('deleteCard', 'columnId', columnId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteCard', 'cardId', cardId)
            const localVarPath = `/boards/{boardId}/columns/{columnId}/cards/{cardId}`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteColumn: async (boardId: string, columnId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('deleteColumn', 'boardId', boardId)
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('deleteColumn', 'columnId', columnId)
            const localVarPath = `/boards/{boardId}/columns/{columnId}`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardSkeleton: async (boardId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('getBoardSkeleton', 'boardId', boardId)
            const localVarPath = `/boards/{boardId}`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {string} cardId The id of the card.
         * @param {MoveCardBodyParams} moveCardBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveCard: async (boardId: string, columnId: string, cardId: string, moveCardBodyParams: MoveCardBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('moveCard', 'boardId', boardId)
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('moveCard', 'columnId', columnId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('moveCard', 'cardId', cardId)
            // verify required parameter 'moveCardBodyParams' is not null or undefined
            assertParamExists('moveCard', 'moveCardBodyParams', moveCardBodyParams)
            const localVarPath = `/boards/{boardId}/columns/{columnId}/cards/{cardId}/position`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveCardBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {MoveColumnBodyParams} moveColumnBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveColumn: async (boardId: string, columnId: string, moveColumnBodyParams: MoveColumnBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('moveColumn', 'boardId', boardId)
            // verify required parameter 'columnId' is not null or undefined
            assertParamExists('moveColumn', 'columnId', columnId)
            // verify required parameter 'moveColumnBodyParams' is not null or undefined
            assertParamExists('moveColumn', 'moveColumnBodyParams', moveColumnBodyParams)
            const localVarPath = `/boards/{boardId}/columns/{columnId}/position`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"columnId"}}`, encodeURIComponent(String(columnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveColumnBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardsApi - functional programming interface
 * @export
 */
export const BoardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBoard(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBoard(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCard(boardId: string, columnId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCard(boardId, columnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createColumn(boardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ColumnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createColumn(boardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBoard(boardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBoard(boardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {string} cardId The id of the card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCard(boardId: string, columnId: string, cardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCard(boardId, columnId, cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteColumn(boardId: string, columnId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteColumn(boardId, columnId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardSkeleton(boardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardSkeleton(boardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {string} cardId The id of the card.
         * @param {MoveCardBodyParams} moveCardBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveCard(boardId: string, columnId: string, cardId: string, moveCardBodyParams: MoveCardBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveCard(boardId, columnId, cardId, moveCardBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {MoveColumnBodyParams} moveColumnBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveColumn(boardId: string, columnId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveColumn(boardId, columnId, moveColumnBodyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BoardsApi - factory interface
 * @export
 */
export const BoardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBoard(options?: any): AxiosPromise<BoardResponse> {
            return localVarFp.createBoard(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCard(boardId: string, columnId: string, options?: any): AxiosPromise<CardResponse> {
            return localVarFp.createCard(boardId, columnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createColumn(boardId: string, options?: any): AxiosPromise<ColumnResponse> {
            return localVarFp.createColumn(boardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBoard(boardId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteBoard(boardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {string} cardId The id of the card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCard(boardId: string, columnId: string, cardId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteCard(boardId, columnId, cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteColumn(boardId: string, columnId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteColumn(boardId, columnId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardSkeleton(boardId: string, options?: any): AxiosPromise<BoardResponse> {
            return localVarFp.getBoardSkeleton(boardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {string} cardId The id of the card.
         * @param {MoveCardBodyParams} moveCardBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveCard(boardId: string, columnId: string, cardId: string, moveCardBodyParams: MoveCardBodyParams, options?: any): AxiosPromise<boolean> {
            return localVarFp.moveCard(boardId, columnId, cardId, moveCardBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} boardId The id of the board.
         * @param {string} columnId The id of the column.
         * @param {MoveColumnBodyParams} moveColumnBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveColumn(boardId: string, columnId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any): AxiosPromise<boolean> {
            return localVarFp.moveColumn(boardId, columnId, moveColumnBodyParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardsApi - interface
 * @export
 * @interface BoardsApi
 */
export interface BoardsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    createBoard(options?: any): AxiosPromise<BoardResponse>;

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {string} columnId The id of the column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    createCard(boardId: string, columnId: string, options?: any): AxiosPromise<CardResponse>;

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    createColumn(boardId: string, options?: any): AxiosPromise<ColumnResponse>;

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    deleteBoard(boardId: string, options?: any): AxiosPromise<boolean>;

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {string} columnId The id of the column.
     * @param {string} cardId The id of the card.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    deleteCard(boardId: string, columnId: string, cardId: string, options?: any): AxiosPromise<boolean>;

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {string} columnId The id of the column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    deleteColumn(boardId: string, columnId: string, options?: any): AxiosPromise<boolean>;

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    getBoardSkeleton(boardId: string, options?: any): AxiosPromise<BoardResponse>;

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {string} columnId The id of the column.
     * @param {string} cardId The id of the card.
     * @param {MoveCardBodyParams} moveCardBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    moveCard(boardId: string, columnId: string, cardId: string, moveCardBodyParams: MoveCardBodyParams, options?: any): AxiosPromise<boolean>;

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {string} columnId The id of the column.
     * @param {MoveColumnBodyParams} moveColumnBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApiInterface
     */
    moveColumn(boardId: string, columnId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any): AxiosPromise<boolean>;

}

/**
 * BoardsApi - object-oriented interface
 * @export
 * @class BoardsApi
 * @extends {BaseAPI}
 */
export class BoardsApi extends BaseAPI implements BoardsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public createBoard(options?: any) {
        return BoardsApiFp(this.configuration).createBoard(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {string} columnId The id of the column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public createCard(boardId: string, columnId: string, options?: any) {
        return BoardsApiFp(this.configuration).createCard(boardId, columnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public createColumn(boardId: string, options?: any) {
        return BoardsApiFp(this.configuration).createColumn(boardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public deleteBoard(boardId: string, options?: any) {
        return BoardsApiFp(this.configuration).deleteBoard(boardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {string} columnId The id of the column.
     * @param {string} cardId The id of the card.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public deleteCard(boardId: string, columnId: string, cardId: string, options?: any) {
        return BoardsApiFp(this.configuration).deleteCard(boardId, columnId, cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {string} columnId The id of the column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public deleteColumn(boardId: string, columnId: string, options?: any) {
        return BoardsApiFp(this.configuration).deleteColumn(boardId, columnId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public getBoardSkeleton(boardId: string, options?: any) {
        return BoardsApiFp(this.configuration).getBoardSkeleton(boardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {string} columnId The id of the column.
     * @param {string} cardId The id of the card.
     * @param {MoveCardBodyParams} moveCardBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public moveCard(boardId: string, columnId: string, cardId: string, moveCardBodyParams: MoveCardBodyParams, options?: any) {
        return BoardsApiFp(this.configuration).moveCard(boardId, columnId, cardId, moveCardBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} boardId The id of the board.
     * @param {string} columnId The id of the column.
     * @param {MoveColumnBodyParams} moveColumnBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public moveColumn(boardId: string, columnId: string, moveColumnBodyParams: MoveColumnBodyParams, options?: any) {
        return BoardsApiFp(this.configuration).moveColumn(boardId, columnId, moveColumnBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
}
