/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PublicSystemListResponse } from '../models';
// @ts-ignore
import { PublicSystemResponse } from '../models';
/**
 * SystemsApi - axios parameter creator
 * @export
 */
export const SystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is used to show users the possible login systems that exist. No sensible data should be returned!
         * @summary Finds all publicly available systems.
         * @param {string} [type] The type of the system.
         * @param {boolean} [onlyOauth] Flag to request only systems with oauth-config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (type?: string, onlyOauth?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/systems/public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (onlyOauth !== undefined) {
                localVarQueryParameter['onlyOauth'] = onlyOauth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to get information about a possible login systems. No sensible data should be returned!
         * @summary Finds a publicly available system.
         * @param {string} systemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: async (systemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('getSystem', 'systemId', systemId)
            const localVarPath = `/systems/public/{systemId}`
                .replace(`{${"systemId"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemsApi - functional programming interface
 * @export
 */
export const SystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is used to show users the possible login systems that exist. No sensible data should be returned!
         * @summary Finds all publicly available systems.
         * @param {string} [type] The type of the system.
         * @param {boolean} [onlyOauth] Flag to request only systems with oauth-config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(type?: string, onlyOauth?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicSystemListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(type, onlyOauth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint is used to get information about a possible login systems. No sensible data should be returned!
         * @summary Finds a publicly available system.
         * @param {string} systemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystem(systemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicSystemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystem(systemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemsApi - factory interface
 * @export
 */
export const SystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemsApiFp(configuration)
    return {
        /**
         * This endpoint is used to show users the possible login systems that exist. No sensible data should be returned!
         * @summary Finds all publicly available systems.
         * @param {string} [type] The type of the system.
         * @param {boolean} [onlyOauth] Flag to request only systems with oauth-config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(type?: string, onlyOauth?: boolean, options?: any): AxiosPromise<PublicSystemListResponse> {
            return localVarFp.find(type, onlyOauth, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to get information about a possible login systems. No sensible data should be returned!
         * @summary Finds a publicly available system.
         * @param {string} systemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem(systemId: string, options?: any): AxiosPromise<PublicSystemResponse> {
            return localVarFp.getSystem(systemId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemsApi - interface
 * @export
 * @interface SystemsApi
 */
export interface SystemsApiInterface {
    /**
     * This endpoint is used to show users the possible login systems that exist. No sensible data should be returned!
     * @summary Finds all publicly available systems.
     * @param {string} [type] The type of the system.
     * @param {boolean} [onlyOauth] Flag to request only systems with oauth-config.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApiInterface
     */
    find(type?: string, onlyOauth?: boolean, options?: any): AxiosPromise<PublicSystemListResponse>;

    /**
     * This endpoint is used to get information about a possible login systems. No sensible data should be returned!
     * @summary Finds a publicly available system.
     * @param {string} systemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApiInterface
     */
    getSystem(systemId: string, options?: any): AxiosPromise<PublicSystemResponse>;

}

/**
 * SystemsApi - object-oriented interface
 * @export
 * @class SystemsApi
 * @extends {BaseAPI}
 */
export class SystemsApi extends BaseAPI implements SystemsApiInterface {
    /**
     * This endpoint is used to show users the possible login systems that exist. No sensible data should be returned!
     * @summary Finds all publicly available systems.
     * @param {string} [type] The type of the system.
     * @param {boolean} [onlyOauth] Flag to request only systems with oauth-config.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public find(type?: string, onlyOauth?: boolean, options?: any) {
        return SystemsApiFp(this.configuration).find(type, onlyOauth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint is used to get information about a possible login systems. No sensible data should be returned!
     * @summary Finds a publicly available system.
     * @param {string} systemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getSystem(systemId: string, options?: any) {
        return SystemsApiFp(this.configuration).getSystem(systemId, options).then((request) => request(this.axios, this.basePath));
    }
}
