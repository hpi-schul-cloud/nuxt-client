/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConsentRequestBody } from '../models';
// @ts-ignore
import { ConsentResponse } from '../models';
// @ts-ignore
import { ConsentSessionResponse } from '../models';
// @ts-ignore
import { LoginRequestBody } from '../models';
// @ts-ignore
import { LoginResponse } from '../models';
// @ts-ignore
import { OauthClientBody } from '../models';
// @ts-ignore
import { OauthClientResponse } from '../models';
// @ts-ignore
import { RedirectResponse } from '../models';
/**
 * Oauth2Api - axios parameter creator
 * @export
 */
export const Oauth2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptLogoutRequest: async (challenge: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challenge' is not null or undefined
            assertParamExists('acceptLogoutRequest', 'challenge', challenge)
            const localVarPath = `/oauth2/logoutRequest/{challenge}`
                .replace(`{${"challenge"}}`, encodeURIComponent(String(challenge)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OauthClientBody} oauthClientBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOAuth2Client: async (oauthClientBody: OauthClientBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'oauthClientBody' is not null or undefined
            assertParamExists('createOAuth2Client', 'oauthClientBody', oauthClientBody)
            const localVarPath = `/oauth2/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oauthClientBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Client: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOAuth2Client', 'id', id)
            const localVarPath = `/oauth2/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentRequest: async (challenge: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challenge' is not null or undefined
            assertParamExists('getConsentRequest', 'challenge', challenge)
            const localVarPath = `/oauth2/consentRequest/{challenge}`
                .replace(`{${"challenge"}}`, encodeURIComponent(String(challenge)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginRequest: async (challenge: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challenge' is not null or undefined
            assertParamExists('getLoginRequest', 'challenge', challenge)
            const localVarPath = `/oauth2/loginRequest/{challenge}`
                .replace(`{${"challenge"}}`, encodeURIComponent(String(challenge)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2Client: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOAuth2Client', 'id', id)
            const localVarPath = `/oauth2/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrl: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth2/baseUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConsentSessions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth2/auth/sessions/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} limit The maximum amount of clients to returned, upper bound is 500 clients.
         * @param {number} offset The offset from where to start looking.
         * @param {string} clientName The name of the clients to filter by.
         * @param {string} owner The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOAuth2Clients: async (limit: number, offset: number, clientName: string, owner: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('listOAuth2Clients', 'limit', limit)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('listOAuth2Clients', 'offset', offset)
            // verify required parameter 'clientName' is not null or undefined
            assertParamExists('listOAuth2Clients', 'clientName', clientName)
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('listOAuth2Clients', 'owner', owner)
            const localVarPath = `/oauth2/clients`
                .replace(`{${"limit"}}`, encodeURIComponent(String(limit)))
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"client_name"}}`, encodeURIComponent(String(clientName)))
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {ConsentRequestBody} consentRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConsentRequest: async (challenge: string, consentRequestBody: ConsentRequestBody, accept?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challenge' is not null or undefined
            assertParamExists('patchConsentRequest', 'challenge', challenge)
            // verify required parameter 'consentRequestBody' is not null or undefined
            assertParamExists('patchConsentRequest', 'consentRequestBody', consentRequestBody)
            const localVarPath = `/oauth2/consentRequest/{challenge}`
                .replace(`{${"challenge"}}`, encodeURIComponent(String(challenge)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (accept !== undefined) {
                localVarQueryParameter['accept'] = accept;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(consentRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {LoginRequestBody} loginRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLoginRequest: async (challenge: string, loginRequestBody: LoginRequestBody, accept?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challenge' is not null or undefined
            assertParamExists('patchLoginRequest', 'challenge', challenge)
            // verify required parameter 'loginRequestBody' is not null or undefined
            assertParamExists('patchLoginRequest', 'loginRequestBody', loginRequestBody)
            const localVarPath = `/oauth2/loginRequest/{challenge}`
                .replace(`{${"challenge"}}`, encodeURIComponent(String(challenge)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (accept !== undefined) {
                localVarQueryParameter['accept'] = accept;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} client The Oauth2 client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeConsentSession: async (client: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'client' is not null or undefined
            assertParamExists('revokeConsentSession', 'client', client)
            const localVarPath = `/oauth2/auth/sessions/consent`
                .replace(`{${"client"}}`, encodeURIComponent(String(client)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {OauthClientBody} oauthClientBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOAuth2Client: async (id: string, oauthClientBody: OauthClientBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOAuth2Client', 'id', id)
            // verify required parameter 'oauthClientBody' is not null or undefined
            assertParamExists('updateOAuth2Client', 'oauthClientBody', oauthClientBody)
            const localVarPath = `/oauth2/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oauthClientBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Oauth2Api - functional programming interface
 * @export
 */
export const Oauth2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Oauth2ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptLogoutRequest(challenge: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptLogoutRequest(challenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OauthClientBody} oauthClientBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOAuth2Client(oauthClientBody: OauthClientBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOAuth2Client(oauthClientBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOAuth2Client(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOAuth2Client(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConsentRequest(challenge: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConsentRequest(challenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoginRequest(challenge: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoginRequest(challenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOAuth2Client(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOAuth2Client(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUrl(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConsentSessions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConsentSessionResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConsentSessions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} limit The maximum amount of clients to returned, upper bound is 500 clients.
         * @param {number} offset The offset from where to start looking.
         * @param {string} clientName The name of the clients to filter by.
         * @param {string} owner The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOAuth2Clients(limit: number, offset: number, clientName: string, owner: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OauthClientResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOAuth2Clients(limit, offset, clientName, owner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {ConsentRequestBody} consentRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchConsentRequest(challenge: string, consentRequestBody: ConsentRequestBody, accept?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchConsentRequest(challenge, consentRequestBody, accept, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {LoginRequestBody} loginRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchLoginRequest(challenge: string, loginRequestBody: LoginRequestBody, accept?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchLoginRequest(challenge, loginRequestBody, accept, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} client The Oauth2 client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeConsentSession(client: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeConsentSession(client, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {OauthClientBody} oauthClientBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOAuth2Client(id: string, oauthClientBody: OauthClientBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOAuth2Client(id, oauthClientBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Oauth2Api - factory interface
 * @export
 */
export const Oauth2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Oauth2ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptLogoutRequest(challenge: string, options?: any): AxiosPromise<RedirectResponse> {
            return localVarFp.acceptLogoutRequest(challenge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OauthClientBody} oauthClientBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOAuth2Client(oauthClientBody: OauthClientBody, options?: any): AxiosPromise<OauthClientResponse> {
            return localVarFp.createOAuth2Client(oauthClientBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Client(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOAuth2Client(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentRequest(challenge: string, options?: any): AxiosPromise<ConsentResponse> {
            return localVarFp.getConsentRequest(challenge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginRequest(challenge: string, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.getLoginRequest(challenge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2Client(id: string, options?: any): AxiosPromise<OauthClientResponse> {
            return localVarFp.getOAuth2Client(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrl(options?: any): AxiosPromise<string> {
            return localVarFp.getUrl(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConsentSessions(options?: any): AxiosPromise<Array<ConsentSessionResponse>> {
            return localVarFp.listConsentSessions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} limit The maximum amount of clients to returned, upper bound is 500 clients.
         * @param {number} offset The offset from where to start looking.
         * @param {string} clientName The name of the clients to filter by.
         * @param {string} owner The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOAuth2Clients(limit: number, offset: number, clientName: string, owner: string, options?: any): AxiosPromise<Array<OauthClientResponse>> {
            return localVarFp.listOAuth2Clients(limit, offset, clientName, owner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {ConsentRequestBody} consentRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConsentRequest(challenge: string, consentRequestBody: ConsentRequestBody, accept?: boolean, options?: any): AxiosPromise<RedirectResponse> {
            return localVarFp.patchConsentRequest(challenge, consentRequestBody, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} challenge The login challenge.
         * @param {LoginRequestBody} loginRequestBody 
         * @param {boolean} [accept] Accepts the login request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchLoginRequest(challenge: string, loginRequestBody: LoginRequestBody, accept?: boolean, options?: any): AxiosPromise<RedirectResponse> {
            return localVarFp.patchLoginRequest(challenge, loginRequestBody, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} client The Oauth2 client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeConsentSession(client: string, options?: any): AxiosPromise<void> {
            return localVarFp.revokeConsentSession(client, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id The Oauth Client Id.
         * @param {OauthClientBody} oauthClientBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOAuth2Client(id: string, oauthClientBody: OauthClientBody, options?: any): AxiosPromise<OauthClientResponse> {
            return localVarFp.updateOAuth2Client(id, oauthClientBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Oauth2Api - interface
 * @export
 * @interface Oauth2Api
 */
export interface Oauth2ApiInterface {
    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    acceptLogoutRequest(challenge: string, options?: any): AxiosPromise<RedirectResponse>;

    /**
     * 
     * @param {OauthClientBody} oauthClientBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    createOAuth2Client(oauthClientBody: OauthClientBody, options?: any): AxiosPromise<OauthClientResponse>;

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    deleteOAuth2Client(id: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    getConsentRequest(challenge: string, options?: any): AxiosPromise<ConsentResponse>;

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    getLoginRequest(challenge: string, options?: any): AxiosPromise<LoginResponse>;

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    getOAuth2Client(id: string, options?: any): AxiosPromise<OauthClientResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    getUrl(options?: any): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    listConsentSessions(options?: any): AxiosPromise<Array<ConsentSessionResponse>>;

    /**
     * 
     * @param {number} limit The maximum amount of clients to returned, upper bound is 500 clients.
     * @param {number} offset The offset from where to start looking.
     * @param {string} clientName The name of the clients to filter by.
     * @param {string} owner The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    listOAuth2Clients(limit: number, offset: number, clientName: string, owner: string, options?: any): AxiosPromise<Array<OauthClientResponse>>;

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {ConsentRequestBody} consentRequestBody 
     * @param {boolean} [accept] Accepts the login request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    patchConsentRequest(challenge: string, consentRequestBody: ConsentRequestBody, accept?: boolean, options?: any): AxiosPromise<RedirectResponse>;

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {LoginRequestBody} loginRequestBody 
     * @param {boolean} [accept] Accepts the login request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    patchLoginRequest(challenge: string, loginRequestBody: LoginRequestBody, accept?: boolean, options?: any): AxiosPromise<RedirectResponse>;

    /**
     * 
     * @param {string} client The Oauth2 client id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    revokeConsentSession(client: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {OauthClientBody} oauthClientBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2ApiInterface
     */
    updateOAuth2Client(id: string, oauthClientBody: OauthClientBody, options?: any): AxiosPromise<OauthClientResponse>;

}

/**
 * Oauth2Api - object-oriented interface
 * @export
 * @class Oauth2Api
 * @extends {BaseAPI}
 */
export class Oauth2Api extends BaseAPI implements Oauth2ApiInterface {
    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public acceptLogoutRequest(challenge: string, options?: any) {
        return Oauth2ApiFp(this.configuration).acceptLogoutRequest(challenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OauthClientBody} oauthClientBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public createOAuth2Client(oauthClientBody: OauthClientBody, options?: any) {
        return Oauth2ApiFp(this.configuration).createOAuth2Client(oauthClientBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public deleteOAuth2Client(id: string, options?: any) {
        return Oauth2ApiFp(this.configuration).deleteOAuth2Client(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public getConsentRequest(challenge: string, options?: any) {
        return Oauth2ApiFp(this.configuration).getConsentRequest(challenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public getLoginRequest(challenge: string, options?: any) {
        return Oauth2ApiFp(this.configuration).getLoginRequest(challenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public getOAuth2Client(id: string, options?: any) {
        return Oauth2ApiFp(this.configuration).getOAuth2Client(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public getUrl(options?: any) {
        return Oauth2ApiFp(this.configuration).getUrl(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public listConsentSessions(options?: any) {
        return Oauth2ApiFp(this.configuration).listConsentSessions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} limit The maximum amount of clients to returned, upper bound is 500 clients.
     * @param {number} offset The offset from where to start looking.
     * @param {string} clientName The name of the clients to filter by.
     * @param {string} owner The owner of the clients to filter by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public listOAuth2Clients(limit: number, offset: number, clientName: string, owner: string, options?: any) {
        return Oauth2ApiFp(this.configuration).listOAuth2Clients(limit, offset, clientName, owner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {ConsentRequestBody} consentRequestBody 
     * @param {boolean} [accept] Accepts the login request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public patchConsentRequest(challenge: string, consentRequestBody: ConsentRequestBody, accept?: boolean, options?: any) {
        return Oauth2ApiFp(this.configuration).patchConsentRequest(challenge, consentRequestBody, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} challenge The login challenge.
     * @param {LoginRequestBody} loginRequestBody 
     * @param {boolean} [accept] Accepts the login request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public patchLoginRequest(challenge: string, loginRequestBody: LoginRequestBody, accept?: boolean, options?: any) {
        return Oauth2ApiFp(this.configuration).patchLoginRequest(challenge, loginRequestBody, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} client The Oauth2 client id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public revokeConsentSession(client: string, options?: any) {
        return Oauth2ApiFp(this.configuration).revokeConsentSession(client, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id The Oauth Client Id.
     * @param {OauthClientBody} oauthClientBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    public updateOAuth2Client(id: string, oauthClientBody: OauthClientBody, options?: any) {
        return Oauth2ApiFp(this.configuration).updateOAuth2Client(id, oauthClientBody, options).then((request) => request(this.axios, this.basePath));
    }
}
