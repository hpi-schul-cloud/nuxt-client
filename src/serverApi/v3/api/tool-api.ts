/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExternalToolConfigurationTemplateResponse } from '../models';
// @ts-ignore
import { ExternalToolPostParams } from '../models';
// @ts-ignore
import { ExternalToolResponse } from '../models';
// @ts-ignore
import { ExternalToolSearchListResponse } from '../models';
// @ts-ignore
import { Lti11LaunchResponse } from '../models';
// @ts-ignore
import { SchoolExternalToolPostParams } from '../models';
// @ts-ignore
import { SchoolExternalToolResponse } from '../models';
// @ts-ignore
import { SchoolExternalToolSearchListResponse } from '../models';
// @ts-ignore
import { ToolConfigurationListResponse } from '../models';
// @ts-ignore
import { ValidationError } from '../models';
/**
 * ToolApi - axios parameter creator
 * @export
 */
export const ToolApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ExternalToolPostParams} externalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalTool: async (externalToolPostParams: ExternalToolPostParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalToolPostParams' is not null or undefined
            assertParamExists('createExternalTool', 'externalToolPostParams', externalToolPostParams)
            const localVarPath = `/tools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalToolPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchoolExternalTool: async (schoolExternalToolPostParams: SchoolExternalToolPostParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolExternalToolPostParams' is not null or undefined
            assertParamExists('createSchoolExternalTool', 'schoolExternalToolPostParams', schoolExternalToolPostParams)
            const localVarPath = `/tools/school`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schoolExternalToolPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalTool: async (toolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'toolId' is not null or undefined
            assertParamExists('deleteExternalTool', 'toolId', toolId)
            const localVarPath = `/tools/{toolId}`
                .replace(`{${"toolId"}}`, encodeURIComponent(String(toolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchoolExternalTool: async (schoolExternalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolExternalToolId' is not null or undefined
            assertParamExists('deleteSchoolExternalTool', 'schoolExternalToolId', schoolExternalToolId)
            const localVarPath = `/tools/school/{schoolExternalToolId}`
                .replace(`{${"schoolExternalToolId"}}`, encodeURIComponent(String(schoolExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {'asc' | 'desc'} [sortOrder] 
         * @param {'id' | 'name'} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findExternalTool: async (name?: string, skip?: number, limit?: number, sortOrder?: 'asc' | 'desc', sortBy?: 'id' | 'name', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} scope 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableToolsForSchool: async (scope: string, id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('getAvailableToolsForSchool', 'scope', scope)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAvailableToolsForSchool', 'id', id)
            const localVarPath = `/tools/available/{scope}/{id}`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalTool: async (toolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'toolId' is not null or undefined
            assertParamExists('getExternalTool', 'toolId', toolId)
            const localVarPath = `/tools/{toolId}`
                .replace(`{${"toolId"}}`, encodeURIComponent(String(toolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalToolForScope: async (toolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'toolId' is not null or undefined
            assertParamExists('getExternalToolForScope', 'toolId', toolId)
            const localVarPath = `/tools/{toolId}/configuration`
                .replace(`{${"toolId"}}`, encodeURIComponent(String(toolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} toolId 
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLti11LaunchParameters: async (toolId: string, courseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'toolId' is not null or undefined
            assertParamExists('getLti11LaunchParameters', 'toolId', toolId)
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getLti11LaunchParameters', 'courseId', courseId)
            const localVarPath = `/tools/lti11/{toolId}/launch`
                .replace(`{${"toolId"}}`, encodeURIComponent(String(toolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolExternalTool: async (schoolExternalToolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolExternalToolId' is not null or undefined
            assertParamExists('getSchoolExternalTool', 'schoolExternalToolId', schoolExternalToolId)
            const localVarPath = `/tools/school/{schoolExternalToolId}`
                .replace(`{${"schoolExternalToolId"}}`, encodeURIComponent(String(schoolExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} schoolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolExternalTools: async (schoolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('getSchoolExternalTools', 'schoolId', schoolId)
            const localVarPath = `/tools/school`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (schoolId !== undefined) {
                localVarQueryParameter['schoolId'] = schoolId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} toolId 
         * @param {ExternalToolPostParams} externalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExternalTool: async (toolId: string, externalToolPostParams: ExternalToolPostParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'toolId' is not null or undefined
            assertParamExists('updateExternalTool', 'toolId', toolId)
            // verify required parameter 'externalToolPostParams' is not null or undefined
            assertParamExists('updateExternalTool', 'externalToolPostParams', externalToolPostParams)
            const localVarPath = `/tools/{toolId}`
                .replace(`{${"toolId"}}`, encodeURIComponent(String(toolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalToolPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} schoolExternalToolId 
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchoolExternalTool: async (schoolExternalToolId: string, schoolExternalToolPostParams: SchoolExternalToolPostParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolExternalToolId' is not null or undefined
            assertParamExists('updateSchoolExternalTool', 'schoolExternalToolId', schoolExternalToolId)
            // verify required parameter 'schoolExternalToolPostParams' is not null or undefined
            assertParamExists('updateSchoolExternalTool', 'schoolExternalToolPostParams', schoolExternalToolPostParams)
            const localVarPath = `/tools/school/{schoolExternalToolId}`
                .replace(`{${"schoolExternalToolId"}}`, encodeURIComponent(String(schoolExternalToolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schoolExternalToolPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ToolApi - functional programming interface
 * @export
 */
export const ToolApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ToolApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ExternalToolPostParams} externalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExternalTool(externalToolPostParams: ExternalToolPostParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExternalTool(externalToolPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSchoolExternalTool(schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSchoolExternalTool(schoolExternalToolPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExternalTool(toolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExternalTool(toolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSchoolExternalTool(schoolExternalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSchoolExternalTool(schoolExternalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {'asc' | 'desc'} [sortOrder] 
         * @param {'id' | 'name'} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findExternalTool(name?: string, skip?: number, limit?: number, sortOrder?: 'asc' | 'desc', sortBy?: 'id' | 'name', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalToolSearchListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findExternalTool(name, skip, limit, sortOrder, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} scope 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableToolsForSchool(scope: string, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolConfigurationListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableToolsForSchool(scope, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalTool(toolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalTool(toolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalToolForScope(toolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalToolConfigurationTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalToolForScope(toolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} toolId 
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLti11LaunchParameters(toolId: string, courseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lti11LaunchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLti11LaunchParameters(toolId, courseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchoolExternalTool(schoolExternalToolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchoolExternalTool(schoolExternalToolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} schoolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchoolExternalTools(schoolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolExternalToolSearchListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchoolExternalTools(schoolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} toolId 
         * @param {ExternalToolPostParams} externalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExternalTool(toolId: string, externalToolPostParams: ExternalToolPostParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExternalTool(toolId, externalToolPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} schoolExternalToolId 
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchoolExternalTool(schoolExternalToolId: string, schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolExternalToolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchoolExternalTool(schoolExternalToolId, schoolExternalToolPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ToolApi - factory interface
 * @export
 */
export const ToolApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ToolApiFp(configuration)
    return {
        /**
         * 
         * @param {ExternalToolPostParams} externalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalTool(externalToolPostParams: ExternalToolPostParams, options?: any): AxiosPromise<ExternalToolResponse> {
            return localVarFp.createExternalTool(externalToolPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchoolExternalTool(schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): AxiosPromise<SchoolExternalToolResponse> {
            return localVarFp.createSchoolExternalTool(schoolExternalToolPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalTool(toolId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteExternalTool(toolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchoolExternalTool(schoolExternalToolId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSchoolExternalTool(schoolExternalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {'asc' | 'desc'} [sortOrder] 
         * @param {'id' | 'name'} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findExternalTool(name?: string, skip?: number, limit?: number, sortOrder?: 'asc' | 'desc', sortBy?: 'id' | 'name', options?: any): AxiosPromise<ExternalToolSearchListResponse> {
            return localVarFp.findExternalTool(name, skip, limit, sortOrder, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} scope 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableToolsForSchool(scope: string, id: string, options?: any): AxiosPromise<ToolConfigurationListResponse> {
            return localVarFp.getAvailableToolsForSchool(scope, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalTool(toolId: string, options?: any): AxiosPromise<ExternalToolResponse> {
            return localVarFp.getExternalTool(toolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalToolForScope(toolId: string, options?: any): AxiosPromise<ExternalToolConfigurationTemplateResponse> {
            return localVarFp.getExternalToolForScope(toolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} toolId 
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLti11LaunchParameters(toolId: string, courseId: string, options?: any): AxiosPromise<Lti11LaunchResponse> {
            return localVarFp.getLti11LaunchParameters(toolId, courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} schoolExternalToolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolExternalTool(schoolExternalToolId: string, options?: any): AxiosPromise<SchoolExternalToolResponse> {
            return localVarFp.getSchoolExternalTool(schoolExternalToolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} schoolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolExternalTools(schoolId: string, options?: any): AxiosPromise<SchoolExternalToolSearchListResponse> {
            return localVarFp.getSchoolExternalTools(schoolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} toolId 
         * @param {ExternalToolPostParams} externalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExternalTool(toolId: string, externalToolPostParams: ExternalToolPostParams, options?: any): AxiosPromise<ExternalToolResponse> {
            return localVarFp.updateExternalTool(toolId, externalToolPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} schoolExternalToolId 
         * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchoolExternalTool(schoolExternalToolId: string, schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): AxiosPromise<SchoolExternalToolResponse> {
            return localVarFp.updateSchoolExternalTool(schoolExternalToolId, schoolExternalToolPostParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ToolApi - interface
 * @export
 * @interface ToolApi
 */
export interface ToolApiInterface {
    /**
     * 
     * @param {ExternalToolPostParams} externalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    createExternalTool(externalToolPostParams: ExternalToolPostParams, options?: any): AxiosPromise<ExternalToolResponse>;

    /**
     * 
     * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    createSchoolExternalTool(schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): AxiosPromise<SchoolExternalToolResponse>;

    /**
     * 
     * @param {string} toolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    deleteExternalTool(toolId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    deleteSchoolExternalTool(schoolExternalToolId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} [name] 
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {'asc' | 'desc'} [sortOrder] 
     * @param {'id' | 'name'} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    findExternalTool(name?: string, skip?: number, limit?: number, sortOrder?: 'asc' | 'desc', sortBy?: 'id' | 'name', options?: any): AxiosPromise<ExternalToolSearchListResponse>;

    /**
     * 
     * @param {string} scope 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    getAvailableToolsForSchool(scope: string, id: string, options?: any): AxiosPromise<ToolConfigurationListResponse>;

    /**
     * 
     * @param {string} toolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    getExternalTool(toolId: string, options?: any): AxiosPromise<ExternalToolResponse>;

    /**
     * 
     * @param {string} toolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    getExternalToolForScope(toolId: string, options?: any): AxiosPromise<ExternalToolConfigurationTemplateResponse>;

    /**
     * 
     * @param {string} toolId 
     * @param {string} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    getLti11LaunchParameters(toolId: string, courseId: string, options?: any): AxiosPromise<Lti11LaunchResponse>;

    /**
     * 
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    getSchoolExternalTool(schoolExternalToolId: string, options?: any): AxiosPromise<SchoolExternalToolResponse>;

    /**
     * 
     * @param {string} schoolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    getSchoolExternalTools(schoolId: string, options?: any): AxiosPromise<SchoolExternalToolSearchListResponse>;

    /**
     * 
     * @param {string} toolId 
     * @param {ExternalToolPostParams} externalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    updateExternalTool(toolId: string, externalToolPostParams: ExternalToolPostParams, options?: any): AxiosPromise<ExternalToolResponse>;

    /**
     * 
     * @param {string} schoolExternalToolId 
     * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApiInterface
     */
    updateSchoolExternalTool(schoolExternalToolId: string, schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any): AxiosPromise<SchoolExternalToolResponse>;

}

/**
 * ToolApi - object-oriented interface
 * @export
 * @class ToolApi
 * @extends {BaseAPI}
 */
export class ToolApi extends BaseAPI implements ToolApiInterface {
    /**
     * 
     * @param {ExternalToolPostParams} externalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public createExternalTool(externalToolPostParams: ExternalToolPostParams, options?: any) {
        return ToolApiFp(this.configuration).createExternalTool(externalToolPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public createSchoolExternalTool(schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any) {
        return ToolApiFp(this.configuration).createSchoolExternalTool(schoolExternalToolPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} toolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public deleteExternalTool(toolId: string, options?: any) {
        return ToolApiFp(this.configuration).deleteExternalTool(toolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public deleteSchoolExternalTool(schoolExternalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).deleteSchoolExternalTool(schoolExternalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {'asc' | 'desc'} [sortOrder] 
     * @param {'id' | 'name'} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public findExternalTool(name?: string, skip?: number, limit?: number, sortOrder?: 'asc' | 'desc', sortBy?: 'id' | 'name', options?: any) {
        return ToolApiFp(this.configuration).findExternalTool(name, skip, limit, sortOrder, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} scope 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public getAvailableToolsForSchool(scope: string, id: string, options?: any) {
        return ToolApiFp(this.configuration).getAvailableToolsForSchool(scope, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} toolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public getExternalTool(toolId: string, options?: any) {
        return ToolApiFp(this.configuration).getExternalTool(toolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} toolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public getExternalToolForScope(toolId: string, options?: any) {
        return ToolApiFp(this.configuration).getExternalToolForScope(toolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} toolId 
     * @param {string} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public getLti11LaunchParameters(toolId: string, courseId: string, options?: any) {
        return ToolApiFp(this.configuration).getLti11LaunchParameters(toolId, courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} schoolExternalToolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public getSchoolExternalTool(schoolExternalToolId: string, options?: any) {
        return ToolApiFp(this.configuration).getSchoolExternalTool(schoolExternalToolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} schoolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public getSchoolExternalTools(schoolId: string, options?: any) {
        return ToolApiFp(this.configuration).getSchoolExternalTools(schoolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} toolId 
     * @param {ExternalToolPostParams} externalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public updateExternalTool(toolId: string, externalToolPostParams: ExternalToolPostParams, options?: any) {
        return ToolApiFp(this.configuration).updateExternalTool(toolId, externalToolPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} schoolExternalToolId 
     * @param {SchoolExternalToolPostParams} schoolExternalToolPostParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    public updateSchoolExternalTool(schoolExternalToolId: string, schoolExternalToolPostParams: SchoolExternalToolPostParams, options?: any) {
        return ToolApiFp(this.configuration).updateSchoolExternalTool(schoolExternalToolId, schoolExternalToolPostParams, options).then((request) => request(this.axios, this.basePath));
    }
}
