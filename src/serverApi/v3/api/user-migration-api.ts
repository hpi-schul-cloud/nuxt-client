/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PageContentResponse } from '../models';
/**
 * UserMigrationApi - axios parameter creator
 * @export
 */
export const UserMigrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {any} pageType The Type of Page that is displayed
         * @param {string} sourceSystem The Source System
         * @param {string} targetSystem The Target System
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMigrationPageDetails: async (pageType: any, sourceSystem: string, targetSystem: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageType' is not null or undefined
            assertParamExists('getMigrationPageDetails', 'pageType', pageType)
            // verify required parameter 'sourceSystem' is not null or undefined
            assertParamExists('getMigrationPageDetails', 'sourceSystem', sourceSystem)
            // verify required parameter 'targetSystem' is not null or undefined
            assertParamExists('getMigrationPageDetails', 'targetSystem', targetSystem)
            const localVarPath = `/user-migration/page-content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageType !== undefined) {
                localVarQueryParameter['pageType'] = pageType;
            }

            if (sourceSystem !== undefined) {
                localVarQueryParameter['sourceSystem'] = sourceSystem;
            }

            if (targetSystem !== undefined) {
                localVarQueryParameter['targetSystem'] = targetSystem;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserMigrationApi - functional programming interface
 * @export
 */
export const UserMigrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserMigrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {any} pageType The Type of Page that is displayed
         * @param {string} sourceSystem The Source System
         * @param {string} targetSystem The Target System
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMigrationPageDetails(pageType: any, sourceSystem: string, targetSystem: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageContentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMigrationPageDetails(pageType, sourceSystem, targetSystem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserMigrationApi - factory interface
 * @export
 */
export const UserMigrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserMigrationApiFp(configuration)
    return {
        /**
         * 
         * @param {any} pageType The Type of Page that is displayed
         * @param {string} sourceSystem The Source System
         * @param {string} targetSystem The Target System
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMigrationPageDetails(pageType: any, sourceSystem: string, targetSystem: string, options?: any): AxiosPromise<PageContentResponse> {
            return localVarFp.getMigrationPageDetails(pageType, sourceSystem, targetSystem, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserMigrationApi - interface
 * @export
 * @interface UserMigrationApi
 */
export interface UserMigrationApiInterface {
    /**
     * 
     * @param {any} pageType The Type of Page that is displayed
     * @param {string} sourceSystem The Source System
     * @param {string} targetSystem The Target System
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserMigrationApiInterface
     */
    getMigrationPageDetails(pageType: any, sourceSystem: string, targetSystem: string, options?: any): AxiosPromise<PageContentResponse>;

}

/**
 * UserMigrationApi - object-oriented interface
 * @export
 * @class UserMigrationApi
 * @extends {BaseAPI}
 */
export class UserMigrationApi extends BaseAPI implements UserMigrationApiInterface {
    /**
     * 
     * @param {any} pageType The Type of Page that is displayed
     * @param {string} sourceSystem The Source System
     * @param {string} targetSystem The Target System
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserMigrationApi
     */
    public getMigrationPageDetails(pageType: any, sourceSystem: string, targetSystem: string, options?: any) {
        return UserMigrationApiFp(this.configuration).getMigrationPageDetails(pageType, sourceSystem, targetSystem, options).then((request) => request(this.axios, this.basePath));
    }
}
