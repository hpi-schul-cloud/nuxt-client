/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CardListResponse } from '../models';
// @ts-ignore
import { MoveContentElementBody } from '../models';
// @ts-ignore
import { TaskCardParams } from '../models';
// @ts-ignore
import { TaskCardResponse } from '../models';
// @ts-ignore
import { TextElementResponse } from '../models';
/**
 * CardsApi - axios parameter creator
 * @export
 */
export const CardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id The id of the task card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/cards/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TaskCardParams} taskCardParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (taskCardParams: TaskCardParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskCardParams' is not null or undefined
            assertParamExists('create', 'taskCardParams', taskCardParams)
            const localVarPath = `/cards/task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskCardParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId The id of the card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createElement: async (cardId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('createElement', 'cardId', cardId)
            const localVarPath = `/cards/{cardId}/elements`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId The id of the card.
         * @param {string} contentElementId The id of the element.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteElement: async (cardId: string, contentElementId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteElement', 'cardId', cardId)
            // verify required parameter 'contentElementId' is not null or undefined
            assertParamExists('deleteElement', 'contentElementId', contentElementId)
            const localVarPath = `/cards/{cardId}/elements/{contentElementId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"contentElementId"}}`, encodeURIComponent(String(contentElementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The id of the task card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findOne', 'id', id)
            const localVarPath = `/cards/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} ids Array of Ids to be loaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCards: async (ids: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getCards', 'ids', ids)
            const localVarPath = `/cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId The id of the card.
         * @param {string} contentElementId The id of the element.
         * @param {MoveContentElementBody} moveContentElementBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveColumn: async (cardId: string, contentElementId: string, moveContentElementBody: MoveContentElementBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('moveColumn', 'cardId', cardId)
            // verify required parameter 'contentElementId' is not null or undefined
            assertParamExists('moveColumn', 'contentElementId', contentElementId)
            // verify required parameter 'moveContentElementBody' is not null or undefined
            assertParamExists('moveColumn', 'moveContentElementBody', moveContentElementBody)
            const localVarPath = `/cards/{cardId}/elements/{contentElementId}/position`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"contentElementId"}}`, encodeURIComponent(String(contentElementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveContentElementBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id The id of the task card.
         * @param {TaskCardParams} taskCardParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, taskCardParams: TaskCardParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'taskCardParams' is not null or undefined
            assertParamExists('update', 'taskCardParams', taskCardParams)
            const localVarPath = `/cards/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskCardParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardsApi - functional programming interface
 * @export
 */
export const CardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id The id of the task card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TaskCardParams} taskCardParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(taskCardParams: TaskCardParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskCardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(taskCardParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId The id of the card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createElement(cardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextElementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createElement(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId The id of the card.
         * @param {string} contentElementId The id of the element.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteElement(cardId: string, contentElementId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteElement(cardId, contentElementId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id The id of the task card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOne(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskCardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<string>} ids Array of Ids to be loaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCards(ids: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCards(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId The id of the card.
         * @param {string} contentElementId The id of the element.
         * @param {MoveContentElementBody} moveContentElementBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveColumn(cardId: string, contentElementId: string, moveContentElementBody: MoveContentElementBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveColumn(cardId, contentElementId, moveContentElementBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id The id of the task card.
         * @param {TaskCardParams} taskCardParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, taskCardParams: TaskCardParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskCardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, taskCardParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardsApi - factory interface
 * @export
 */
export const CardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id The id of the task card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, options?: any): AxiosPromise<boolean> {
            return localVarFp._delete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TaskCardParams} taskCardParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(taskCardParams: TaskCardParams, options?: any): AxiosPromise<TaskCardResponse> {
            return localVarFp.create(taskCardParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId The id of the card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createElement(cardId: string, options?: any): AxiosPromise<TextElementResponse> {
            return localVarFp.createElement(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId The id of the card.
         * @param {string} contentElementId The id of the element.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteElement(cardId: string, contentElementId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteElement(cardId, contentElementId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id The id of the task card.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne(id: string, options?: any): AxiosPromise<TaskCardResponse> {
            return localVarFp.findOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} ids Array of Ids to be loaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCards(ids: Array<string>, options?: any): AxiosPromise<CardListResponse> {
            return localVarFp.getCards(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId The id of the card.
         * @param {string} contentElementId The id of the element.
         * @param {MoveContentElementBody} moveContentElementBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveColumn(cardId: string, contentElementId: string, moveContentElementBody: MoveContentElementBody, options?: any): AxiosPromise<boolean> {
            return localVarFp.moveColumn(cardId, contentElementId, moveContentElementBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id The id of the task card.
         * @param {TaskCardParams} taskCardParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, taskCardParams: TaskCardParams, options?: any): AxiosPromise<TaskCardResponse> {
            return localVarFp.update(id, taskCardParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardsApi - interface
 * @export
 * @interface CardsApi
 */
export interface CardsApiInterface {
    /**
     * 
     * @param {string} id The id of the task card.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiInterface
     */
    _delete(id: string, options?: any): AxiosPromise<boolean>;

    /**
     * 
     * @param {TaskCardParams} taskCardParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiInterface
     */
    create(taskCardParams: TaskCardParams, options?: any): AxiosPromise<TaskCardResponse>;

    /**
     * 
     * @param {string} cardId The id of the card.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiInterface
     */
    createElement(cardId: string, options?: any): AxiosPromise<TextElementResponse>;

    /**
     * 
     * @param {string} cardId The id of the card.
     * @param {string} contentElementId The id of the element.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiInterface
     */
    deleteElement(cardId: string, contentElementId: string, options?: any): AxiosPromise<boolean>;

    /**
     * 
     * @param {string} id The id of the task card.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiInterface
     */
    findOne(id: string, options?: any): AxiosPromise<TaskCardResponse>;

    /**
     * 
     * @param {Array<string>} ids Array of Ids to be loaded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiInterface
     */
    getCards(ids: Array<string>, options?: any): AxiosPromise<CardListResponse>;

    /**
     * 
     * @param {string} cardId The id of the card.
     * @param {string} contentElementId The id of the element.
     * @param {MoveContentElementBody} moveContentElementBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiInterface
     */
    moveColumn(cardId: string, contentElementId: string, moveContentElementBody: MoveContentElementBody, options?: any): AxiosPromise<boolean>;

    /**
     * 
     * @param {string} id The id of the task card.
     * @param {TaskCardParams} taskCardParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApiInterface
     */
    update(id: string, taskCardParams: TaskCardParams, options?: any): AxiosPromise<TaskCardResponse>;

}

/**
 * CardsApi - object-oriented interface
 * @export
 * @class CardsApi
 * @extends {BaseAPI}
 */
export class CardsApi extends BaseAPI implements CardsApiInterface {
    /**
     * 
     * @param {string} id The id of the task card.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public _delete(id: string, options?: any) {
        return CardsApiFp(this.configuration)._delete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TaskCardParams} taskCardParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public create(taskCardParams: TaskCardParams, options?: any) {
        return CardsApiFp(this.configuration).create(taskCardParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId The id of the card.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public createElement(cardId: string, options?: any) {
        return CardsApiFp(this.configuration).createElement(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId The id of the card.
     * @param {string} contentElementId The id of the element.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public deleteElement(cardId: string, contentElementId: string, options?: any) {
        return CardsApiFp(this.configuration).deleteElement(cardId, contentElementId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id The id of the task card.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public findOne(id: string, options?: any) {
        return CardsApiFp(this.configuration).findOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<string>} ids Array of Ids to be loaded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public getCards(ids: Array<string>, options?: any) {
        return CardsApiFp(this.configuration).getCards(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId The id of the card.
     * @param {string} contentElementId The id of the element.
     * @param {MoveContentElementBody} moveContentElementBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public moveColumn(cardId: string, contentElementId: string, moveContentElementBody: MoveContentElementBody, options?: any) {
        return CardsApiFp(this.configuration).moveColumn(cardId, contentElementId, moveContentElementBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id The id of the task card.
     * @param {TaskCardParams} taskCardParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsApi
     */
    public update(id: string, taskCardParams: TaskCardParams, options?: any) {
        return CardsApiFp(this.configuration).update(id, taskCardParams, options).then((request) => request(this.axios, this.basePath));
    }
}
