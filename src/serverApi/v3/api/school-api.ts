/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MigrationBody } from '../models';
// @ts-ignore
import { MigrationResponse } from '../models';
/**
 * SchoolApi - axios parameter creator
 * @export
 */
export const SchoolApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} schoolId The id of the school.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMigration: async (schoolId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('getMigration', 'schoolId', schoolId)
            const localVarPath = `/school/{schoolId}/migration`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicSchool: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/school/public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} schoolId The id of the school.
         * @param {MigrationBody} migrationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMigration: async (schoolId: string, migrationBody: MigrationBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('setMigration', 'schoolId', schoolId)
            // verify required parameter 'migrationBody' is not null or undefined
            assertParamExists('setMigration', 'migrationBody', migrationBody)
            const localVarPath = `/school/{schoolId}/migration`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(migrationBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolApi - functional programming interface
 * @export
 */
export const SchoolApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchoolApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} schoolId The id of the school.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMigration(schoolId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MigrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMigration(schoolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicSchool(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicSchool(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} schoolId The id of the school.
         * @param {MigrationBody} migrationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setMigration(schoolId: string, migrationBody: MigrationBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MigrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setMigration(schoolId, migrationBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchoolApi - factory interface
 * @export
 */
export const SchoolApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchoolApiFp(configuration)
    return {
        /**
         * 
         * @param {string} schoolId The id of the school.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMigration(schoolId: string, options?: any): AxiosPromise<MigrationResponse> {
            return localVarFp.getMigration(schoolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicSchool(options?: any): AxiosPromise<object> {
            return localVarFp.getPublicSchool(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} schoolId The id of the school.
         * @param {MigrationBody} migrationBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMigration(schoolId: string, migrationBody: MigrationBody, options?: any): AxiosPromise<MigrationResponse> {
            return localVarFp.setMigration(schoolId, migrationBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchoolApi - interface
 * @export
 * @interface SchoolApi
 */
export interface SchoolApiInterface {
    /**
     * 
     * @param {string} schoolId The id of the school.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolApiInterface
     */
    getMigration(schoolId: string, options?: any): AxiosPromise<MigrationResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolApiInterface
     */
    getPublicSchool(options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} schoolId The id of the school.
     * @param {MigrationBody} migrationBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolApiInterface
     */
    setMigration(schoolId: string, migrationBody: MigrationBody, options?: any): AxiosPromise<MigrationResponse>;

}

/**
 * SchoolApi - object-oriented interface
 * @export
 * @class SchoolApi
 * @extends {BaseAPI}
 */
export class SchoolApi extends BaseAPI implements SchoolApiInterface {
    /**
     * 
     * @param {string} schoolId The id of the school.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolApi
     */
    public getMigration(schoolId: string, options?: any) {
        return SchoolApiFp(this.configuration).getMigration(schoolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolApi
     */
    public getPublicSchool(options?: any) {
        return SchoolApiFp(this.configuration).getPublicSchool(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} schoolId The id of the school.
     * @param {MigrationBody} migrationBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolApi
     */
    public setMigration(schoolId: string, migrationBody: MigrationBody, options?: any) {
        return SchoolApiFp(this.configuration).setMigration(schoolId, migrationBody, options).then((request) => request(this.axios, this.basePath));
    }
}
