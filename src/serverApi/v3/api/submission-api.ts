/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SubmissionStatusListResponse } from '../models';
/**
 * SubmissionApi - axios parameter creator
 * @export
 */
export const SubmissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} submissionId The id of the submission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (submissionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'submissionId' is not null or undefined
            assertParamExists('_delete', 'submissionId', submissionId)
            const localVarPath = `/submissions/{submissionId}`
                .replace(`{${"submissionId"}}`, encodeURIComponent(String(submissionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} taskId The id of the task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findStatusesByTask: async (taskId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('findStatusesByTask', 'taskId', taskId)
            const localVarPath = `/submissions/status/task/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubmissionApi - functional programming interface
 * @export
 */
export const SubmissionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubmissionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} submissionId The id of the submission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(submissionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(submissionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} taskId The id of the task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findStatusesByTask(taskId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionStatusListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findStatusesByTask(taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubmissionApi - factory interface
 * @export
 */
export const SubmissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubmissionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} submissionId The id of the submission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(submissionId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp._delete(submissionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} taskId The id of the task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findStatusesByTask(taskId: string, options?: any): AxiosPromise<SubmissionStatusListResponse> {
            return localVarFp.findStatusesByTask(taskId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubmissionApi - interface
 * @export
 * @interface SubmissionApi
 */
export interface SubmissionApiInterface {
    /**
     * 
     * @param {string} submissionId The id of the submission.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApiInterface
     */
    _delete(submissionId: string, options?: any): AxiosPromise<boolean>;

    /**
     * 
     * @param {string} taskId The id of the task.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApiInterface
     */
    findStatusesByTask(taskId: string, options?: any): AxiosPromise<SubmissionStatusListResponse>;

}

/**
 * SubmissionApi - object-oriented interface
 * @export
 * @class SubmissionApi
 * @extends {BaseAPI}
 */
export class SubmissionApi extends BaseAPI implements SubmissionApiInterface {
    /**
     * 
     * @param {string} submissionId The id of the submission.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApi
     */
    public _delete(submissionId: string, options?: any) {
        return SubmissionApiFp(this.configuration)._delete(submissionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} taskId The id of the task.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApi
     */
    public findStatusesByTask(taskId: string, options?: any) {
        return SubmissionApiFp(this.configuration).findStatusesByTask(taskId, options).then((request) => request(this.axios, this.basePath));
    }
}
