/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateNewsParams
 */
export interface CreateNewsParams {
    /**
     * Title of the News entity
     * @type {string}
     * @memberof CreateNewsParams
     */
    title: string;
    /**
     * Content of the News entity
     * @type {string}
     * @memberof CreateNewsParams
     */
    content: string;
    /**
     * The point in time from when the News entity schould be displayed. Defaults to now so that the news is published
     * @type {string}
     * @memberof CreateNewsParams
     */
    displayAt?: string;
    /**
     * 
     * @type {NewsTargetModel}
     * @memberof CreateNewsParams
     */
    targetModel: NewsTargetModel;
    /**
     * Specific target id to which the News entity is related
     * @type {string}
     * @memberof CreateNewsParams
     */
    targetId: string;
}
/**
 * 
 * @export
 * @interface DashboardResponse
 */
export interface DashboardResponse {
    /**
     * The id of the Dashboard entity
     * @type {string}
     * @memberof DashboardResponse
     */
    id: string;
    /**
     * List of all elements visible on the dashboard
     * @type {Array<string>}
     * @memberof DashboardResponse
     */
    gridElements: Array<string>;
}
/**
 * 
 * @export
 * @interface MoveElementParams
 */
export interface MoveElementParams {
    /**
     * 
     * @type {object}
     * @memberof MoveElementParams
     */
    from: object;
    /**
     * 
     * @type {object}
     * @memberof MoveElementParams
     */
    to: object;
}
/**
 * 
 * @export
 * @interface NewsListResponse
 */
export interface NewsListResponse {
    /**
     * 
     * @type {Array<NewsResponse>}
     * @memberof NewsListResponse
     */
    data: Array<NewsResponse>;
    /**
     * 
     * @type {number}
     * @memberof NewsListResponse
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof NewsListResponse
     */
    skip: number;
    /**
     * 
     * @type {number}
     * @memberof NewsListResponse
     */
    limit: number;
}
/**
 * 
 * @export
 * @interface NewsResponse
 */
export interface NewsResponse {
    /**
     * The id of the News entity
     * @type {string}
     * @memberof NewsResponse
     */
    id: string;
    /**
     * Title of the News entity
     * @type {string}
     * @memberof NewsResponse
     */
    title: string;
    /**
     * Content of the News entity
     * @type {string}
     * @memberof NewsResponse
     */
    content: string;
    /**
     * The point in time from when the News entity schould be displayed
     * @type {string}
     * @memberof NewsResponse
     */
    displayAt: string;
    /**
     * The type of source of the News entity
     * @type {string}
     * @memberof NewsResponse
     */
    source?: NewsResponseSourceEnum;
    /**
     * The source description of the News entity
     * @type {string}
     * @memberof NewsResponse
     */
    sourceDescription?: string;
    /**
     * 
     * @type {NewsTargetModel}
     * @memberof NewsResponse
     */
    targetModel: NewsTargetModel;
    /**
     * Specific target id to which the News entity is related
     * @type {string}
     * @memberof NewsResponse
     */
    targetId: string;
    /**
     * The target object with id and name, could be the school, team, or course name
     * @type {TargetInfoResponse}
     * @memberof NewsResponse
     */
    target: TargetInfoResponse;
    /**
     * The School ownership
     * @type {SchoolInfoResponse}
     * @memberof NewsResponse
     */
    school: SchoolInfoResponse;
    /**
     * Reference to the User that created the News entity
     * @type {UserInfoResponse}
     * @memberof NewsResponse
     */
    creator: UserInfoResponse;
    /**
     * Reference to the User that updated the News entity
     * @type {UserInfoResponse}
     * @memberof NewsResponse
     */
    updater?: UserInfoResponse;
    /**
     * The creation timestamp
     * @type {string}
     * @memberof NewsResponse
     */
    createdAt: string;
    /**
     * The update timestamp
     * @type {string}
     * @memberof NewsResponse
     */
    updatedAt: string;
    /**
     * List of permissions the current user has for the News entity
     * @type {Array<string>}
     * @memberof NewsResponse
     */
    permissions: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum NewsResponseSourceEnum {
    Internal = 'internal',
    Rss = 'rss'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum NewsTargetModel {
    Schools = 'schools',
    Courses = 'courses',
    Teams = 'teams'
}

/**
 * 
 * @export
 * @interface PatchGroupParams
 */
export interface PatchGroupParams {
    /**
     * Title of the Group grid element
     * @type {string}
     * @memberof PatchGroupParams
     */
    title: string;
}
/**
 * 
 * @export
 * @interface ResolvedUser
 */
export interface ResolvedUser {
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    updatedAt: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ResolvedUser
     */
    roles: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResolvedUser
     */
    permissions: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUser
     */
    schoolId: string;
}
/**
 * 
 * @export
 * @interface SchoolInfoResponse
 */
export interface SchoolInfoResponse {
    /**
     * The id of the School entity
     * @type {string}
     * @memberof SchoolInfoResponse
     */
    id: string;
    /**
     * The name of the School entity
     * @type {string}
     * @memberof SchoolInfoResponse
     */
    name: string;
}
/**
 * 
 * @export
 * @interface TargetInfoResponse
 */
export interface TargetInfoResponse {
    /**
     * The id of the Target entity
     * @type {string}
     * @memberof TargetInfoResponse
     */
    id: string;
    /**
     * The name of the Target entity
     * @type {string}
     * @memberof TargetInfoResponse
     */
    name: string;
}
/**
 * 
 * @export
 * @interface TaskListResponse
 */
export interface TaskListResponse {
    /**
     * 
     * @type {Array<TaskResponse>}
     * @memberof TaskListResponse
     */
    data: Array<TaskResponse>;
    /**
     * 
     * @type {number}
     * @memberof TaskListResponse
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof TaskListResponse
     */
    skip: number;
    /**
     * 
     * @type {number}
     * @memberof TaskListResponse
     */
    limit: number;
}
/**
 * 
 * @export
 * @interface TaskResponse
 */
export interface TaskResponse {
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    availableDate: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    duedate: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    courseName?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    displayColor?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    updatedAt: string;
    /**
     * 
     * @type {object}
     * @memberof TaskResponse
     */
    status: object;
}
/**
 * 
 * @export
 * @interface UpdateNewsParams
 */
export interface UpdateNewsParams {
    /**
     * Title of the News entity
     * @type {string}
     * @memberof UpdateNewsParams
     */
    title?: string;
    /**
     * Content of the News entity
     * @type {string}
     * @memberof UpdateNewsParams
     */
    content?: string;
    /**
     * The point in time from when the News entity schould be displayed
     * @type {string}
     * @memberof UpdateNewsParams
     */
    displayAt?: string;
}
/**
 * 
 * @export
 * @interface UserInfoResponse
 */
export interface UserInfoResponse {
    /**
     * The id of the User entity
     * @type {string}
     * @memberof UserInfoResponse
     */
    id: string;
    /**
     * First name of the user
     * @type {string}
     * @memberof UserInfoResponse
     */
    firstName?: string;
    /**
     * Last name of the user
     * @type {string}
     * @memberof UserInfoResponse
     */
    lastName?: string;
}

/**
 * DashboardApi - axios parameter creator
 * @export
 */
export const DashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerFindForUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {MoveElementParams} moveElementParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerMoveElement: async (id: string, moveElementParams: MoveElementParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dashboardControllerMoveElement', 'id', id)
            // verify required parameter 'moveElementParams' is not null or undefined
            assertParamExists('dashboardControllerMoveElement', 'moveElementParams', moveElementParams)
            const localVarPath = `/dashboard/{id}/moveElement`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveElementParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} x 
         * @param {number} y 
         * @param {PatchGroupParams} patchGroupParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerPatchGroup: async (id: string, x: number, y: number, patchGroupParams: PatchGroupParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dashboardControllerPatchGroup', 'id', id)
            // verify required parameter 'x' is not null or undefined
            assertParamExists('dashboardControllerPatchGroup', 'x', x)
            // verify required parameter 'y' is not null or undefined
            assertParamExists('dashboardControllerPatchGroup', 'y', y)
            // verify required parameter 'patchGroupParams' is not null or undefined
            assertParamExists('dashboardControllerPatchGroup', 'patchGroupParams', patchGroupParams)
            const localVarPath = `/dashboard/{id}/element`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchGroupParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardControllerFindForUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardControllerFindForUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {MoveElementParams} moveElementParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardControllerMoveElement(id: string, moveElementParams: MoveElementParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardControllerMoveElement(id, moveElementParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} x 
         * @param {number} y 
         * @param {PatchGroupParams} patchGroupParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardControllerPatchGroup(id: string, x: number, y: number, patchGroupParams: PatchGroupParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardControllerPatchGroup(id, x, y, patchGroupParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerFindForUser(options?: any): AxiosPromise<DashboardResponse> {
            return localVarFp.dashboardControllerFindForUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {MoveElementParams} moveElementParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerMoveElement(id: string, moveElementParams: MoveElementParams, options?: any): AxiosPromise<DashboardResponse> {
            return localVarFp.dashboardControllerMoveElement(id, moveElementParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {number} x 
         * @param {number} y 
         * @param {PatchGroupParams} patchGroupParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardControllerPatchGroup(id: string, x: number, y: number, patchGroupParams: PatchGroupParams, options?: any): AxiosPromise<DashboardResponse> {
            return localVarFp.dashboardControllerPatchGroup(id, x, y, patchGroupParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardApi - interface
 * @export
 * @interface DashboardApi
 */
export interface DashboardApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApiInterface
     */
    dashboardControllerFindForUser(options?: any): AxiosPromise<DashboardResponse>;

    /**
     * 
     * @param {string} id 
     * @param {MoveElementParams} moveElementParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApiInterface
     */
    dashboardControllerMoveElement(id: string, moveElementParams: MoveElementParams, options?: any): AxiosPromise<DashboardResponse>;

    /**
     * 
     * @param {string} id 
     * @param {number} x 
     * @param {number} y 
     * @param {PatchGroupParams} patchGroupParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApiInterface
     */
    dashboardControllerPatchGroup(id: string, x: number, y: number, patchGroupParams: PatchGroupParams, options?: any): AxiosPromise<DashboardResponse>;

}

/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI implements DashboardApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public dashboardControllerFindForUser(options?: any) {
        return DashboardApiFp(this.configuration).dashboardControllerFindForUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {MoveElementParams} moveElementParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public dashboardControllerMoveElement(id: string, moveElementParams: MoveElementParams, options?: any) {
        return DashboardApiFp(this.configuration).dashboardControllerMoveElement(id, moveElementParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {number} x 
     * @param {number} y 
     * @param {PatchGroupParams} patchGroupParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public dashboardControllerPatchGroup(id: string, x: number, y: number, patchGroupParams: PatchGroupParams, options?: any) {
        return DashboardApiFp(this.configuration).dashboardControllerPatchGroup(id, x, y, patchGroupParams, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * default route to test public access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serverControllerGetHello: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * default route to test public access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serverControllerGetHello(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serverControllerGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * default route to test public access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serverControllerGetHello(options?: any): AxiosPromise<string> {
            return localVarFp.serverControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * default route to test public access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    serverControllerGetHello(options?: any): AxiosPromise<string>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * default route to test public access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public serverControllerGetHello(options?: any) {
        return DefaultApiFp(this.configuration).serverControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NewsApi - axios parameter creator
 * @export
 */
export const NewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * * Create a news by a user in a given scope (school or team).
         * @param {CreateNewsParams} createNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsControllerCreate: async (createNewsParams: CreateNewsParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createNewsParams' is not null or undefined
            assertParamExists('newsControllerCreate', 'createNewsParams', createNewsParams)
            const localVarPath = `/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createNewsParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * * Delete a news.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsControllerDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('newsControllerDelete', 'id', id)
            const localVarPath = `/news/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * * Responds with all news for a user.
         * @param {NewsListResponse} newsListResponse 
         * @param {NewsTargetModel} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsControllerFindAll: async (newsListResponse: NewsListResponse, targetModel?: NewsTargetModel, targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'newsListResponse' is not null or undefined
            assertParamExists('newsControllerFindAll', 'newsListResponse', newsListResponse)
            const localVarPath = `/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (targetModel !== undefined) {
                localVarQueryParameter['targetModel'] = targetModel;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['targetId'] = targetId;
            }

            if (unpublished !== undefined) {
                localVarQueryParameter['unpublished'] = unpublished;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newsListResponse, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * * Retrieve a specific news entry by id.    * A user may only read news of scopes he has the read permission.    * The news entity has school and user names populated.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsControllerFindOne: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('newsControllerFindOne', 'id', id)
            const localVarPath = `/news/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * * Update properties of a news.
         * @param {string} id 
         * @param {UpdateNewsParams} updateNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsControllerUpdate: async (id: string, updateNewsParams: UpdateNewsParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('newsControllerUpdate', 'id', id)
            // verify required parameter 'updateNewsParams' is not null or undefined
            assertParamExists('newsControllerUpdate', 'updateNewsParams', updateNewsParams)
            const localVarPath = `/news/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNewsParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * * Responds with news of a given team for a user.
         * @param {string} teamId 
         * @param {NewsTargetModel} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamNewsControllerFindAllForTeam: async (teamId: string, targetModel?: NewsTargetModel, targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('teamNewsControllerFindAllForTeam', 'teamId', teamId)
            const localVarPath = `/team/{teamId}/news`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (targetModel !== undefined) {
                localVarQueryParameter['targetModel'] = targetModel;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['targetId'] = targetId;
            }

            if (unpublished !== undefined) {
                localVarQueryParameter['unpublished'] = unpublished;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsApi - functional programming interface
 * @export
 */
export const NewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsApiAxiosParamCreator(configuration)
    return {
        /**
         * * Create a news by a user in a given scope (school or team).
         * @param {CreateNewsParams} createNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsControllerCreate(createNewsParams: CreateNewsParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsControllerCreate(createNewsParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * * Delete a news.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsControllerDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * * Responds with all news for a user.
         * @param {NewsListResponse} newsListResponse 
         * @param {NewsTargetModel} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsControllerFindAll(newsListResponse: NewsListResponse, targetModel?: NewsTargetModel, targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsControllerFindAll(newsListResponse, targetModel, targetId, unpublished, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * * Retrieve a specific news entry by id.    * A user may only read news of scopes he has the read permission.    * The news entity has school and user names populated.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsControllerFindOne(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * * Update properties of a news.
         * @param {string} id 
         * @param {UpdateNewsParams} updateNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsControllerUpdate(id: string, updateNewsParams: UpdateNewsParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsControllerUpdate(id, updateNewsParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * * Responds with news of a given team for a user.
         * @param {string} teamId 
         * @param {NewsTargetModel} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamNewsControllerFindAllForTeam(teamId: string, targetModel?: NewsTargetModel, targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamNewsControllerFindAllForTeam(teamId, targetModel, targetId, unpublished, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NewsApi - factory interface
 * @export
 */
export const NewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsApiFp(configuration)
    return {
        /**
         * * Create a news by a user in a given scope (school or team).
         * @param {CreateNewsParams} createNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsControllerCreate(createNewsParams: CreateNewsParams, options?: any): AxiosPromise<NewsResponse> {
            return localVarFp.newsControllerCreate(createNewsParams, options).then((request) => request(axios, basePath));
        },
        /**
         * * Delete a news.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsControllerDelete(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.newsControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * * Responds with all news for a user.
         * @param {NewsListResponse} newsListResponse 
         * @param {NewsTargetModel} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsControllerFindAll(newsListResponse: NewsListResponse, targetModel?: NewsTargetModel, targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): AxiosPromise<NewsListResponse> {
            return localVarFp.newsControllerFindAll(newsListResponse, targetModel, targetId, unpublished, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * * Retrieve a specific news entry by id.    * A user may only read news of scopes he has the read permission.    * The news entity has school and user names populated.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsControllerFindOne(id: string, options?: any): AxiosPromise<NewsResponse> {
            return localVarFp.newsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * * Update properties of a news.
         * @param {string} id 
         * @param {UpdateNewsParams} updateNewsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsControllerUpdate(id: string, updateNewsParams: UpdateNewsParams, options?: any): AxiosPromise<NewsResponse> {
            return localVarFp.newsControllerUpdate(id, updateNewsParams, options).then((request) => request(axios, basePath));
        },
        /**
         * * Responds with news of a given team for a user.
         * @param {string} teamId 
         * @param {NewsTargetModel} [targetModel] Target model to which the news are related
         * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
         * @param {boolean} [unpublished] Flag that filters if the news should be published or not
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamNewsControllerFindAllForTeam(teamId: string, targetModel?: NewsTargetModel, targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): AxiosPromise<NewsListResponse> {
            return localVarFp.teamNewsControllerFindAllForTeam(teamId, targetModel, targetId, unpublished, skip, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NewsApi - interface
 * @export
 * @interface NewsApi
 */
export interface NewsApiInterface {
    /**
     * * Create a news by a user in a given scope (school or team).
     * @param {CreateNewsParams} createNewsParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    newsControllerCreate(createNewsParams: CreateNewsParams, options?: any): AxiosPromise<NewsResponse>;

    /**
     * * Delete a news.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    newsControllerDelete(id: string, options?: any): AxiosPromise<string>;

    /**
     * * Responds with all news for a user.
     * @param {NewsListResponse} newsListResponse 
     * @param {NewsTargetModel} [targetModel] Target model to which the news are related
     * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
     * @param {boolean} [unpublished] Flag that filters if the news should be published or not
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    newsControllerFindAll(newsListResponse: NewsListResponse, targetModel?: NewsTargetModel, targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): AxiosPromise<NewsListResponse>;

    /**
     * * Retrieve a specific news entry by id.    * A user may only read news of scopes he has the read permission.    * The news entity has school and user names populated.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    newsControllerFindOne(id: string, options?: any): AxiosPromise<NewsResponse>;

    /**
     * * Update properties of a news.
     * @param {string} id 
     * @param {UpdateNewsParams} updateNewsParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    newsControllerUpdate(id: string, updateNewsParams: UpdateNewsParams, options?: any): AxiosPromise<NewsResponse>;

    /**
     * * Responds with news of a given team for a user.
     * @param {string} teamId 
     * @param {NewsTargetModel} [targetModel] Target model to which the news are related
     * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
     * @param {boolean} [unpublished] Flag that filters if the news should be published or not
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    teamNewsControllerFindAllForTeam(teamId: string, targetModel?: NewsTargetModel, targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any): AxiosPromise<NewsListResponse>;

}

/**
 * NewsApi - object-oriented interface
 * @export
 * @class NewsApi
 * @extends {BaseAPI}
 */
export class NewsApi extends BaseAPI implements NewsApiInterface {
    /**
     * * Create a news by a user in a given scope (school or team).
     * @param {CreateNewsParams} createNewsParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public newsControllerCreate(createNewsParams: CreateNewsParams, options?: any) {
        return NewsApiFp(this.configuration).newsControllerCreate(createNewsParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * * Delete a news.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public newsControllerDelete(id: string, options?: any) {
        return NewsApiFp(this.configuration).newsControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * * Responds with all news for a user.
     * @param {NewsListResponse} newsListResponse 
     * @param {NewsTargetModel} [targetModel] Target model to which the news are related
     * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
     * @param {boolean} [unpublished] Flag that filters if the news should be published or not
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public newsControllerFindAll(newsListResponse: NewsListResponse, targetModel?: NewsTargetModel, targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any) {
        return NewsApiFp(this.configuration).newsControllerFindAll(newsListResponse, targetModel, targetId, unpublished, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * * Retrieve a specific news entry by id.    * A user may only read news of scopes he has the read permission.    * The news entity has school and user names populated.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public newsControllerFindOne(id: string, options?: any) {
        return NewsApiFp(this.configuration).newsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * * Update properties of a news.
     * @param {string} id 
     * @param {UpdateNewsParams} updateNewsParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public newsControllerUpdate(id: string, updateNewsParams: UpdateNewsParams, options?: any) {
        return NewsApiFp(this.configuration).newsControllerUpdate(id, updateNewsParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * * Responds with news of a given team for a user.
     * @param {string} teamId 
     * @param {NewsTargetModel} [targetModel] Target model to which the news are related
     * @param {string} [targetId] Specific target id to which the news are related (works only together with targetModel)
     * @param {boolean} [unpublished] Flag that filters if the news should be published or not
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public teamNewsControllerFindAllForTeam(teamId: string, targetModel?: NewsTargetModel, targetId?: string, unpublished?: boolean, skip?: number, limit?: number, options?: any) {
        return NewsApiFp(this.configuration).teamNewsControllerFindAllForTeam(teamId, targetModel, targetId, unpublished, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerFindAll: async (skip?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerFindAll(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerFindAll(skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [skip] Number of elements (not pages) to be skipped
         * @param {number} [limit] Page limit, defaults to 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerFindAll(skip?: number, limit?: number, options?: any): AxiosPromise<TaskListResponse> {
            return localVarFp.taskControllerFindAll(skip, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - interface
 * @export
 * @interface TaskApi
 */
export interface TaskApiInterface {
    /**
     * 
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerFindAll(skip?: number, limit?: number, options?: any): AxiosPromise<TaskListResponse>;

}

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI implements TaskApiInterface {
    /**
     * 
     * @param {number} [skip] Number of elements (not pages) to be skipped
     * @param {number} [limit] Page limit, defaults to 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskControllerFindAll(skip?: number, limit?: number, options?: any) {
        return TaskApiFp(this.configuration).taskControllerFindAll(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolvedUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerMe(options?: any): AxiosPromise<ResolvedUser> {
            return localVarFp.userControllerMe(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerMe(options?: any): AxiosPromise<ResolvedUser>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerMe(options?: any) {
        return UserApiFp(this.configuration).userControllerMe(options).then((request) => request(this.axios, this.basePath));
    }
}


