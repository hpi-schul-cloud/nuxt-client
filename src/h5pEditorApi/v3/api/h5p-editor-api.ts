/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiValidationError } from '../models';
// @ts-ignore
import { H5PSaveResponse } from '../models';
// @ts-ignore
import { PostH5PContentCreateParams } from '../models';
/**
 * H5pEditorApi - axios parameter creator
 * @export
 */
export const H5pEditorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PostH5PContentCreateParams} postH5PContentCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerCreateH5pContent: async (postH5PContentCreateParams: PostH5PContentCreateParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postH5PContentCreateParams' is not null or undefined
            assertParamExists('h5PEditorControllerCreateH5pContent', 'postH5PContentCreateParams', postH5PContentCreateParams)
            const localVarPath = `/h5p-editor/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postH5PContentCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} language 
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerDeleteH5pContent: async (language: string, contentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('h5PEditorControllerDeleteH5pContent', 'language', language)
            // verify required parameter 'contentId' is not null or undefined
            assertParamExists('h5PEditorControllerDeleteH5pContent', 'contentId', contentId)
            const localVarPath = `/h5p-editor/delete/{contentId}`
                .replace(`{${"language"}}`, encodeURIComponent(String(language)))
                .replace(`{${"contentId"}}`, encodeURIComponent(String(contentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetAjax: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/h5p-editor/ajax`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetContentFile: async (id: string, file: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('h5PEditorControllerGetContentFile', 'id', id)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('h5PEditorControllerGetContentFile', 'file', file)
            const localVarPath = `/h5p-editor/content/{id}/{file}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"file"}}`, encodeURIComponent(String(file)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetContentParameters: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('h5PEditorControllerGetContentParameters', 'id', id)
            const localVarPath = `/h5p-editor/params/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return dummy HTML for testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetEditor: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/h5p-editor/{contentId}/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetH5PEditor: async (contentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentId' is not null or undefined
            assertParamExists('h5PEditorControllerGetH5PEditor', 'contentId', contentId)
            const localVarPath = `/h5p-editor/edit/{contentId}`
                .replace(`{${"contentId"}}`, encodeURIComponent(String(contentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} ubername 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetLibraryFile: async (ubername: string, file: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ubername' is not null or undefined
            assertParamExists('h5PEditorControllerGetLibraryFile', 'ubername', ubername)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('h5PEditorControllerGetLibraryFile', 'file', file)
            const localVarPath = `/h5p-editor/libraries/{ubername}/{file}`
                .replace(`{${"ubername"}}`, encodeURIComponent(String(ubername)))
                .replace(`{${"file"}}`, encodeURIComponent(String(file)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return dummy HTML for testing
         * @param {string} language 
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetPlayer: async (language: string, contentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('h5PEditorControllerGetPlayer', 'language', language)
            // verify required parameter 'contentId' is not null or undefined
            assertParamExists('h5PEditorControllerGetPlayer', 'contentId', contentId)
            const localVarPath = `/h5p-editor/play/{contentId}`
                .replace(`{${"language"}}`, encodeURIComponent(String(language)))
                .replace(`{${"contentId"}}`, encodeURIComponent(String(contentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetTemporaryFile: async (file: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('h5PEditorControllerGetTemporaryFile', 'file', file)
            const localVarPath = `/h5p-editor/temp-files/{file}`
                .replace(`{${"file"}}`, encodeURIComponent(String(file)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerPostAjax: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/h5p-editor/ajax`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} contentId 
         * @param {PostH5PContentCreateParams} postH5PContentCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerSaveH5pContent: async (contentId: string, postH5PContentCreateParams: PostH5PContentCreateParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentId' is not null or undefined
            assertParamExists('h5PEditorControllerSaveH5pContent', 'contentId', contentId)
            // verify required parameter 'postH5PContentCreateParams' is not null or undefined
            assertParamExists('h5PEditorControllerSaveH5pContent', 'postH5PContentCreateParams', postH5PContentCreateParams)
            const localVarPath = `/h5p-editor/edit/{contentId}`
                .replace(`{${"contentId"}}`, encodeURIComponent(String(contentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postH5PContentCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * H5pEditorApi - functional programming interface
 * @export
 */
export const H5pEditorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = H5pEditorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PostH5PContentCreateParams} postH5PContentCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerCreateH5pContent(postH5PContentCreateParams: PostH5PContentCreateParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<H5PSaveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerCreateH5pContent(postH5PContentCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} language 
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerDeleteH5pContent(language: string, contentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerDeleteH5pContent(language, contentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerGetAjax(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetAjax(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerGetContentFile(id: string, file: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetContentFile(id, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerGetContentParameters(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetContentParameters(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return dummy HTML for testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerGetEditor(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetEditor(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerGetH5PEditor(contentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetH5PEditor(contentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} ubername 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerGetLibraryFile(ubername: string, file: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetLibraryFile(ubername, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return dummy HTML for testing
         * @param {string} language 
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerGetPlayer(language: string, contentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetPlayer(language, contentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerGetTemporaryFile(file: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetTemporaryFile(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerPostAjax(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerPostAjax(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} contentId 
         * @param {PostH5PContentCreateParams} postH5PContentCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerSaveH5pContent(contentId: string, postH5PContentCreateParams: PostH5PContentCreateParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<H5PSaveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerSaveH5pContent(contentId, postH5PContentCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * H5pEditorApi - factory interface
 * @export
 */
export const H5pEditorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = H5pEditorApiFp(configuration)
    return {
        /**
         * 
         * @param {PostH5PContentCreateParams} postH5PContentCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerCreateH5pContent(postH5PContentCreateParams: PostH5PContentCreateParams, options?: any): AxiosPromise<H5PSaveResponse> {
            return localVarFp.h5PEditorControllerCreateH5pContent(postH5PContentCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} language 
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerDeleteH5pContent(language: string, contentId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.h5PEditorControllerDeleteH5pContent(language, contentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetAjax(options?: any): AxiosPromise<object> {
            return localVarFp.h5PEditorControllerGetAjax(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetContentFile(id: string, file: string, options?: any): AxiosPromise<void> {
            return localVarFp.h5PEditorControllerGetContentFile(id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetContentParameters(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.h5PEditorControllerGetContentParameters(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return dummy HTML for testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetEditor(options?: any): AxiosPromise<string> {
            return localVarFp.h5PEditorControllerGetEditor(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetH5PEditor(contentId: string, options?: any): AxiosPromise<string> {
            return localVarFp.h5PEditorControllerGetH5PEditor(contentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} ubername 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetLibraryFile(ubername: string, file: string, options?: any): AxiosPromise<void> {
            return localVarFp.h5PEditorControllerGetLibraryFile(ubername, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return dummy HTML for testing
         * @param {string} language 
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetPlayer(language: string, contentId: string, options?: any): AxiosPromise<string> {
            return localVarFp.h5PEditorControllerGetPlayer(language, contentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerGetTemporaryFile(file: string, options?: any): AxiosPromise<void> {
            return localVarFp.h5PEditorControllerGetTemporaryFile(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerPostAjax(options?: any): AxiosPromise<object> {
            return localVarFp.h5PEditorControllerPostAjax(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} contentId 
         * @param {PostH5PContentCreateParams} postH5PContentCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerSaveH5pContent(contentId: string, postH5PContentCreateParams: PostH5PContentCreateParams, options?: any): AxiosPromise<H5PSaveResponse> {
            return localVarFp.h5PEditorControllerSaveH5pContent(contentId, postH5PContentCreateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * H5pEditorApi - interface
 * @export
 * @interface H5pEditorApi
 */
export interface H5pEditorApiInterface {
    /**
     * 
     * @param {PostH5PContentCreateParams} postH5PContentCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerCreateH5pContent(postH5PContentCreateParams: PostH5PContentCreateParams, options?: any): AxiosPromise<H5PSaveResponse>;

    /**
     * 
     * @param {string} language 
     * @param {string} contentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerDeleteH5pContent(language: string, contentId: string, options?: any): AxiosPromise<boolean>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerGetAjax(options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} id 
     * @param {string} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerGetContentFile(id: string, file: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerGetContentParameters(id: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Return dummy HTML for testing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerGetEditor(options?: any): AxiosPromise<string>;

    /**
     * 
     * @param {string} contentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerGetH5PEditor(contentId: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @param {string} ubername 
     * @param {string} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerGetLibraryFile(ubername: string, file: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Return dummy HTML for testing
     * @param {string} language 
     * @param {string} contentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerGetPlayer(language: string, contentId: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @param {string} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerGetTemporaryFile(file: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerPostAjax(options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {string} contentId 
     * @param {PostH5PContentCreateParams} postH5PContentCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerSaveH5pContent(contentId: string, postH5PContentCreateParams: PostH5PContentCreateParams, options?: any): AxiosPromise<H5PSaveResponse>;

}

/**
 * H5pEditorApi - object-oriented interface
 * @export
 * @class H5pEditorApi
 * @extends {BaseAPI}
 */
export class H5pEditorApi extends BaseAPI implements H5pEditorApiInterface {
    /**
     * 
     * @param {PostH5PContentCreateParams} postH5PContentCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerCreateH5pContent(postH5PContentCreateParams: PostH5PContentCreateParams, options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerCreateH5pContent(postH5PContentCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} language 
     * @param {string} contentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerDeleteH5pContent(language: string, contentId: string, options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerDeleteH5pContent(language, contentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerGetAjax(options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerGetAjax(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerGetContentFile(id: string, file: string, options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerGetContentFile(id, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerGetContentParameters(id: string, options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerGetContentParameters(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return dummy HTML for testing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerGetEditor(options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerGetEditor(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} contentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerGetH5PEditor(contentId: string, options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerGetH5PEditor(contentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} ubername 
     * @param {string} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerGetLibraryFile(ubername: string, file: string, options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerGetLibraryFile(ubername, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return dummy HTML for testing
     * @param {string} language 
     * @param {string} contentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerGetPlayer(language: string, contentId: string, options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerGetPlayer(language, contentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerGetTemporaryFile(file: string, options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerGetTemporaryFile(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerPostAjax(options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerPostAjax(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} contentId 
     * @param {PostH5PContentCreateParams} postH5PContentCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerSaveH5pContent(contentId: string, postH5PContentCreateParams: PostH5PContentCreateParams, options?: any) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerSaveH5pContent(contentId, postH5PContentCreateParams, options).then((request) => request(this.axios, this.basePath));
    }
}
