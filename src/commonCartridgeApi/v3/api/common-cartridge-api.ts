/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from "../common";
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError,
} from "../base";
import { CourseExportBodyParams } from "../models";
/**
 * CommonCartridgeApi - axios parameter creator
 * @export
 */
export const CommonCartridgeApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {string} courseId
		 * @param {'1.0.0' | '1.1.0' | '1.2.0' | '1.3.0' | '1.4.0'} version The version of CC export
		 * @param {CourseExportBodyParams} courseExportBodyParams
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		commonCartridgeControllerExportCourse: async (
			courseId: string,
			version: "1.0.0" | "1.1.0" | "1.2.0" | "1.3.0" | "1.4.0",
			courseExportBodyParams: CourseExportBodyParams,
			options: any = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'courseId' is not null or undefined
			assertParamExists(
				"commonCartridgeControllerExportCourse",
				"courseId",
				courseId
			);
			// verify required parameter 'version' is not null or undefined
			assertParamExists(
				"commonCartridgeControllerExportCourse",
				"version",
				version
			);
			// verify required parameter 'courseExportBodyParams' is not null or undefined
			assertParamExists(
				"commonCartridgeControllerExportCourse",
				"courseExportBodyParams",
				courseExportBodyParams
			);
			const localVarPath = `/common-cartridge/export/{courseId}`.replace(
				`{${"courseId"}}`,
				encodeURIComponent(String(courseId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "POST",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (version !== undefined) {
				localVarQueryParameter["version"] = version;
			}

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				courseExportBodyParams,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * CommonCartridgeApi - functional programming interface
 * @export
 */
export const CommonCartridgeApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		CommonCartridgeApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} courseId
		 * @param {'1.0.0' | '1.1.0' | '1.2.0' | '1.3.0' | '1.4.0'} version The version of CC export
		 * @param {CourseExportBodyParams} courseExportBodyParams
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async commonCartridgeControllerExportCourse(
			courseId: string,
			version: "1.0.0" | "1.1.0" | "1.2.0" | "1.3.0" | "1.4.0",
			courseExportBodyParams: CourseExportBodyParams,
			options?: any
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.commonCartridgeControllerExportCourse(
					courseId,
					version,
					courseExportBodyParams,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
	};
};

/**
 * CommonCartridgeApi - factory interface
 * @export
 */
export const CommonCartridgeApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = CommonCartridgeApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} courseId
		 * @param {'1.0.0' | '1.1.0' | '1.2.0' | '1.3.0' | '1.4.0'} version The version of CC export
		 * @param {CourseExportBodyParams} courseExportBodyParams
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		commonCartridgeControllerExportCourse(
			courseId: string,
			version: "1.0.0" | "1.1.0" | "1.2.0" | "1.3.0" | "1.4.0",
			courseExportBodyParams: CourseExportBodyParams,
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.commonCartridgeControllerExportCourse(
					courseId,
					version,
					courseExportBodyParams,
					options
				)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * CommonCartridgeApi - interface
 * @export
 * @interface CommonCartridgeApi
 */
export interface CommonCartridgeApiInterface {
	/**
	 *
	 * @param {string} courseId
	 * @param {'1.0.0' | '1.1.0' | '1.2.0' | '1.3.0' | '1.4.0'} version The version of CC export
	 * @param {CourseExportBodyParams} courseExportBodyParams
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CommonCartridgeApiInterface
	 */
	commonCartridgeControllerExportCourse(
		courseId: string,
		version: "1.0.0" | "1.1.0" | "1.2.0" | "1.3.0" | "1.4.0",
		courseExportBodyParams: CourseExportBodyParams,
		options?: any
	): AxiosPromise<void>;
}

/**
 * CommonCartridgeApi - object-oriented interface
 * @export
 * @class CommonCartridgeApi
 * @extends {BaseAPI}
 */
export class CommonCartridgeApi
	extends BaseAPI
	implements CommonCartridgeApiInterface
{
	/**
	 *
	 * @param {string} courseId
	 * @param {'1.0.0' | '1.1.0' | '1.2.0' | '1.3.0' | '1.4.0'} version The version of CC export
	 * @param {CourseExportBodyParams} courseExportBodyParams
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CommonCartridgeApi
	 */
	public commonCartridgeControllerExportCourse(
		courseId: string,
		version: "1.0.0" | "1.1.0" | "1.2.0" | "1.3.0" | "1.4.0",
		courseExportBodyParams: CourseExportBodyParams,
		options?: any
	) {
		return CommonCartridgeApiFp(this.configuration)
			.commonCartridgeControllerExportCourse(
				courseId,
				version,
				courseExportBodyParams,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}
}
